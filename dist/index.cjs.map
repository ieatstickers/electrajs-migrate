{"version":3,"file":"index.cjs","mappings":"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","sources":["webpack://@electra/migrate/webpack/bootstrap","webpack://@electra/migrate/./src/Migration/Column/Int/IntColumnTypeEnum.ts","webpack://@electra/migrate/webpack/runtime/compat get default export","webpack://@electra/migrate/webpack/runtime/define property getters","webpack://@electra/migrate/webpack/runtime/hasOwnProperty shorthand","webpack://@electra/migrate/webpack/runtime/make namespace object","webpack://@electra/migrate/./src/Migration/AbstractMigration.ts","webpack://@electra/migrate/external commonjs \"@electra/utility\"","webpack://@electra/migrate/external commonjs \"chalk\"","webpack://@electra/migrate/./src/Migration/Column/IndexDefinitionType.ts","webpack://@electra/migrate/./src/Migration/Column/String/StringColumnTypeEnum.ts","webpack://@electra/migrate/./src/Migration/Column/Blob/BlobColumnTypeEnum.ts","webpack://@electra/migrate/./src/Migration/Database/Enum/TableEncodingEnum.ts","webpack://@electra/migrate/./src/Migration/Database/Enum/TableCollationEnum.ts","webpack://@electra/migrate/./src/Utility/Log/Log.ts","webpack://@electra/migrate/./src/Migration/Column/AbstractColumn.ts","webpack://@electra/migrate/./src/Migration/Column/ColumnDefinition.ts","webpack://@electra/migrate/./src/Migration/Column/IndexDefinition.ts","webpack://@electra/migrate/./src/Migration/Column/Int/IntColumn.ts","webpack://@electra/migrate/./src/Migration/Column/Id/IdColumn.ts","webpack://@electra/migrate/./src/Migration/Column/Decimal/DecimalColumn.ts","webpack://@electra/migrate/./src/Migration/Column/String/StringColumn.ts","webpack://@electra/migrate/./src/Migration/Column/Date/DateColumn.ts","webpack://@electra/migrate/./src/Migration/Column/Time/TimeColumn.ts","webpack://@electra/migrate/./src/Migration/Column/DateTime/DateTimeColumn.ts","webpack://@electra/migrate/./src/Migration/Column/Blob/BlobColumn.ts","webpack://@electra/migrate/./src/Migration/Column/Enum/EnumColumn.ts","webpack://@electra/migrate/./src/Migration/Column/Double/DoubleColumn.ts","webpack://@electra/migrate/./src/Migration/Database/Table.ts","webpack://@electra/migrate/./src/Migration/Database/Database.ts","webpack://@electra/migrate/./src/Migration/Database/MySql.ts"],"sourcesContent":["// The require scope\nvar __webpack_require__ = {};\n\n","export var IntColumnTypeEnum;\n(function (IntColumnTypeEnum) {\n    IntColumnTypeEnum[\"INT\"] = \"INT\";\n    IntColumnTypeEnum[\"TINYINT\"] = \"TINYINT\";\n    IntColumnTypeEnum[\"SMALLINT\"] = \"SMALLINT\";\n    IntColumnTypeEnum[\"MEDIUMINT\"] = \"MEDIUMINT\";\n    IntColumnTypeEnum[\"BIGINT\"] = \"BIGINT\";\n})(IntColumnTypeEnum || (IntColumnTypeEnum = {}));\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => (module['default']) :\n\t\t() => (module);\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","export class AbstractMigration {\n}\n","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"@electra/utility\");","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"chalk\");","export var IndexDefinitionType;\n(function (IndexDefinitionType) {\n    IndexDefinitionType[\"INDEX\"] = \"INDEX\";\n    IndexDefinitionType[\"UNIQUE\"] = \"UNIQUE\";\n    IndexDefinitionType[\"FULLTEXT\"] = \"FULLTEXT\";\n})(IndexDefinitionType || (IndexDefinitionType = {}));\n","export var StringColumnTypeEnum;\n(function (StringColumnTypeEnum) {\n    StringColumnTypeEnum[\"CHAR\"] = \"CHAR\";\n    StringColumnTypeEnum[\"VARCHAR\"] = \"VARCHAR\";\n    StringColumnTypeEnum[\"TEXT\"] = \"TEXT\";\n    StringColumnTypeEnum[\"TINYTEXT\"] = \"TINYTEXT\";\n    StringColumnTypeEnum[\"MEDIUMTEXT\"] = \"MEDIUMTEXT\";\n    StringColumnTypeEnum[\"LONGTEXT\"] = \"LONGTEXT\";\n})(StringColumnTypeEnum || (StringColumnTypeEnum = {}));\n","export var BlobColumnTypeEnum;\n(function (BlobColumnTypeEnum) {\n    BlobColumnTypeEnum[\"BLOB\"] = \"BLOB\";\n    BlobColumnTypeEnum[\"TINYBLOB\"] = \"TINYBLOB\";\n    BlobColumnTypeEnum[\"MEDIUMBLOB\"] = \"MEDIUMBLOB\";\n    BlobColumnTypeEnum[\"LONGBLOB\"] = \"LONGBLOB\";\n})(BlobColumnTypeEnum || (BlobColumnTypeEnum = {}));\n","export var TableEncodingEnum;\n(function (TableEncodingEnum) {\n    TableEncodingEnum[\"UTF8\"] = \"utf8\";\n    TableEncodingEnum[\"UTF8MB4\"] = \"utf8mb4\";\n})(TableEncodingEnum || (TableEncodingEnum = {}));\n","export var TableCollationEnum;\n(function (TableCollationEnum) {\n    TableCollationEnum[\"UTF8_GENERAL_CI\"] = \"utf8_general_ci\";\n    TableCollationEnum[\"UTF8MB4_GENERAL_CI\"] = \"utf8mb4_general_ci\";\n    TableCollationEnum[\"UTF8MB4_UNICODE_CI\"] = \"utf8mb4_unicode_ci\";\n})(TableCollationEnum || (TableCollationEnum = {}));\n","import chalk from \"chalk\";\nexport class Log {\n    static red(message) {\n        console.log(chalk.redBright(message));\n    }\n    static blue(message) {\n        console.log(chalk.blueBright(message));\n    }\n    static green(message) {\n        console.log(chalk.greenBright(message));\n    }\n    static yellow(message) {\n        console.log(chalk.yellowBright(message));\n    }\n}\n","import { Validators } from \"@electra/utility\";\nimport { Log } from \"../../Utility/Log/Log\";\nexport class AbstractColumn {\n    constructor(name) {\n        this.name = name;\n        this.validateName(this.name);\n    }\n    getIndexDefinition() {\n        return null;\n    }\n    getName() {\n        return this.name;\n    }\n    validateName(name) {\n        const { valid, message } = Validators\n            .all([\n            Validators.string(),\n            Validators.minLength(1),\n            Validators.regex(/^[a-zA-Z_][a-zA-Z0-9_]{0,63}$/, 'A-z, 0-9 and/or _')\n        ])\n            .validate(name);\n        if (!valid)\n            throw new TypeError(`Invalid ${this.constructor.name} name: ${message}`);\n        return true;\n    }\n    validateOptions(options, schema) {\n        const { valid, message } = Validators.schema(schema).validate(options);\n        if (!valid) {\n            throw new TypeError(`Invalid ${this.constructor.name} options. ${message}`);\n        }\n        return true;\n    }\n    addNullableStatement(query, nullable) {\n        return nullable ? `${query} NULL` : `${query} NOT NULL`;\n    }\n    addDefaultStatement(query, defaultValue) {\n        return defaultValue !== undefined ? `${query} DEFAULT ${defaultValue}` : query;\n    }\n    addIndexStatement(query, index, columnName) {\n        return index ? `${query}, ADD INDEX (${columnName})` : query;\n    }\n    addUnsignedStatement(query, unsigned) {\n        return unsigned ? `${query} UNSIGNED` : query;\n    }\n    addZeroFillStatement(query, zeroFill) {\n        return zeroFill ? `${query} ZEROFILL` : query;\n    }\n    addAutoIncrementStatement(query, autoIncrement) {\n        return autoIncrement ? `${query} AUTO_INCREMENT` : query;\n    }\n    addPrimaryKeyStatement(query, primaryKey) {\n        return primaryKey ? `${query} PRIMARY KEY` : query;\n    }\n    addAfterStatement(query, addAfter, tableExists) {\n        // Log warning if createTable is true and addAfter is set\n        if (!tableExists && addAfter) {\n            Log.yellow(\"WARNING: addAfter option is ignored when creating a new table.\");\n        }\n        if (!tableExists)\n            return query;\n        if (addAfter) {\n            query += ` AFTER ${addAfter}`;\n        }\n        return query;\n    }\n}\n","export class ColumnDefinition {\n    constructor(name, type) {\n        this.options = {\n            nullable: undefined,\n            default: undefined,\n            unsigned: undefined,\n            autoIncrement: undefined,\n            zeroFill: undefined,\n            primaryKey: undefined,\n            after: undefined\n        };\n        this.name = name;\n        this.type = type;\n    }\n    static create(name, type) {\n        return new ColumnDefinition(name, type);\n    }\n    nullable(nullable) {\n        this.options.nullable = nullable;\n        return this;\n    }\n    default(value) {\n        this.options.default = value;\n        return this;\n    }\n    unsigned(unsigned) {\n        this.options.unsigned = unsigned;\n        return this;\n    }\n    autoIncrement(autoIncrement) {\n        this.options.autoIncrement = autoIncrement;\n        return this;\n    }\n    zeroFill(zerofill) {\n        this.options.zeroFill = zerofill;\n        return this;\n    }\n    primaryKey(primaryKey) {\n        this.options.primaryKey = primaryKey;\n        return this;\n    }\n    after(after) {\n        this.options.after = after;\n        return this;\n    }\n    get() {\n        let definition = `\\`${this.name}\\` ${this.type}`;\n        if (this.options.unsigned === true)\n            definition += \" UNSIGNED\";\n        if (typeof this.options.nullable === \"boolean\")\n            definition += this.options.nullable ? \" NULL\" : \" NOT NULL\";\n        if (this.options.default !== undefined)\n            definition += ` DEFAULT ${this.options.default}`;\n        if (this.options.autoIncrement === true)\n            definition += \" AUTO_INCREMENT\";\n        if (this.options.zeroFill === true)\n            definition += \" ZEROFILL\";\n        if (this.options.primaryKey === true)\n            definition += \" PRIMARY KEY\";\n        if (typeof this.options.after === \"string\")\n            definition += ` AFTER \\`${this.options.after}\\``;\n        return definition;\n    }\n}\n","import { IndexDefinitionType } from \"./IndexDefinitionType\";\nexport class IndexDefinition {\n    constructor() {\n        this.indexColumns = [];\n        this.indexType = IndexDefinitionType.INDEX;\n    }\n    static create() {\n        return new IndexDefinition();\n    }\n    defaultName(name) {\n        this.defaultIndexName = name;\n        return this;\n    }\n    name(name) {\n        this.indexName = name;\n        return this;\n    }\n    columns(...columns) {\n        this.indexColumns.push(...columns);\n        return this;\n    }\n    type(type) {\n        this.indexType = type;\n        return this;\n    }\n    get() {\n        if (!this.indexColumns.length)\n            throw new Error(\"No columns defined for index\");\n        const indexName = this.indexName || this.defaultIndexName;\n        let indexDefinition = indexName && this.indexType === IndexDefinitionType.UNIQUE ? `${this.indexType} INDEX` : this.indexType;\n        if (indexName)\n            indexDefinition += ` \\`${indexName}\\``;\n        indexDefinition += ` (${this.indexColumns.map(column => `\\`${column}\\``).join(\", \")})`;\n        return indexDefinition;\n    }\n}\n","import { IntColumnTypeEnum } from \"./IntColumnTypeEnum\";\nimport { AbstractColumn } from \"../AbstractColumn\";\nimport { Validators } from \"@electra/utility\";\nimport { ColumnDefinition } from \"../ColumnDefinition\";\nimport { IndexDefinition } from \"../IndexDefinition\";\nexport class IntColumn extends AbstractColumn {\n    constructor(name, options) {\n        super(name);\n        this.options = Object.assign({ type: IntColumnTypeEnum.INT, nullable: false, default: undefined, unsigned: false, autoIncrement: false, zeroFill: false, primaryKey: false, index: false, addAfter: undefined }, options);\n        this.validateOptions(this.options, {\n            type: Validators.enumValue(IntColumnTypeEnum),\n            nullable: Validators.boolean(),\n            default: Validators.integer({ optional: true }),\n            unsigned: Validators.boolean(),\n            autoIncrement: Validators.boolean(),\n            zeroFill: Validators.boolean(),\n            primaryKey: Validators.boolean(),\n            index: Validators.boolean(),\n            addAfter: Validators.string({ optional: true })\n        });\n    }\n    getColumnDefinition() {\n        return ColumnDefinition\n            .create(this.name, this.options.type)\n            .nullable(this.options.nullable)\n            .default(this.options.default)\n            .unsigned(this.options.unsigned)\n            .autoIncrement(this.options.autoIncrement)\n            .zeroFill(this.options.zeroFill)\n            .primaryKey(this.options.primaryKey)\n            .after(this.options.addAfter);\n    }\n    getIndexDefinition() {\n        if (!this.options.index)\n            return null;\n        return IndexDefinition\n            .create()\n            .columns(this.name);\n    }\n}\n","import { IntColumnTypeEnum } from \"../Int/IntColumnTypeEnum\";\nimport { IntColumn } from \"../Int/IntColumn\";\nexport class IdColumn extends IntColumn {\n    constructor(name) {\n        super(name, {\n            type: IntColumnTypeEnum.INT,\n            nullable: false,\n            default: undefined,\n            unsigned: true,\n            autoIncrement: true,\n            zeroFill: false,\n            primaryKey: true,\n            index: false\n        });\n    }\n}\n","import { AbstractColumn } from \"../AbstractColumn\";\nimport { Validators } from \"@electra/utility\";\nimport { ColumnDefinition } from \"../ColumnDefinition\";\nimport { IndexDefinition } from \"../IndexDefinition\";\nexport class DecimalColumn extends AbstractColumn {\n    constructor(name, options) {\n        super(name);\n        this.options = Object.assign({ nullable: false, default: undefined, unsigned: false, zeroFill: false, precision: 10, scale: 2, index: false, addAfter: undefined }, options);\n        this.validateOptions(this.options, {\n            nullable: Validators.boolean(),\n            default: Validators.number({ optional: true }),\n            unsigned: Validators.boolean(),\n            zeroFill: Validators.boolean(),\n            precision: Validators.integer(),\n            scale: Validators.integer(),\n            index: Validators.boolean(),\n            addAfter: Validators.string({ optional: true })\n        });\n    }\n    getColumnDefinition() {\n        return ColumnDefinition\n            .create(this.name, `DECIMAL(${this.options.precision}, ${this.options.scale})`)\n            .nullable(this.options.nullable)\n            .default(typeof this.options.default === \"number\"\n            ? this.options.default.toFixed(this.options.scale)\n            : undefined)\n            .unsigned(this.options.unsigned)\n            .zeroFill(this.options.zeroFill)\n            .after(this.options.addAfter);\n    }\n    getIndexDefinition() {\n        if (!this.options.index)\n            return null;\n        return IndexDefinition\n            .create()\n            .columns(this.name);\n    }\n}\n","import { StringColumnTypeEnum } from \"./StringColumnTypeEnum\";\nimport { AbstractColumn } from \"../AbstractColumn\";\nimport { Validators } from \"@electra/utility\";\nimport { ColumnDefinition } from \"../ColumnDefinition\";\nimport { IndexDefinition } from \"../IndexDefinition\";\nexport class StringColumn extends AbstractColumn {\n    constructor(name, options) {\n        super(name);\n        const type = (options === null || options === void 0 ? void 0 : options.type) || StringColumnTypeEnum.VARCHAR;\n        this.options = Object.assign({ type: type, nullable: false, primaryKey: false, default: undefined, length: type !== StringColumnTypeEnum.VARCHAR ? undefined : 255, index: false, addAfter: undefined }, options);\n        this.validateOptions(this.options, {\n            type: Validators.enumValue(StringColumnTypeEnum),\n            nullable: Validators.boolean(),\n            primaryKey: Validators.boolean(),\n            default: Validators.string({ optional: true }),\n            length: Validators.integer({ optional: true }),\n            index: Validators.boolean(),\n            addAfter: Validators.string({ optional: true })\n        });\n    }\n    getColumnDefinition() {\n        let columnType = this.options.type;\n        if (this.options.type === StringColumnTypeEnum.CHAR || this.options.type === StringColumnTypeEnum.VARCHAR) {\n            if (this.options.length !== undefined)\n                columnType += `(${this.options.length})`;\n        }\n        return ColumnDefinition\n            .create(this.name, columnType)\n            .nullable(this.options.nullable)\n            .primaryKey(this.options.primaryKey)\n            .default(this.options.default ? `'${this.options.default}'` : undefined)\n            .after(this.options.addAfter);\n    }\n    getIndexDefinition() {\n        if (!this.options.index)\n            return null;\n        return IndexDefinition\n            .create()\n            .columns(this.name);\n    }\n}\n","import { Validators } from \"@electra/utility\";\nimport { AbstractColumn } from \"../AbstractColumn\";\nimport { ColumnDefinition } from \"../ColumnDefinition\";\nimport { IndexDefinition } from \"../IndexDefinition\";\nexport class DateColumn extends AbstractColumn {\n    constructor(name, options) {\n        super(name);\n        this.options = Object.assign({ nullable: false, default: undefined, index: false, addAfter: undefined }, options);\n        this.validateOptions(this.options, {\n            nullable: Validators.boolean(),\n            default: Validators.regex(/^\\d{4}-(0[1-9]|1[0-2])-(0[1-9]|[12]\\d|3[01])$/, 'YYYY-MM-DD', { optional: true }),\n            index: Validators.boolean(),\n            addAfter: Validators.string({ optional: true })\n        });\n    }\n    getColumnDefinition() {\n        return ColumnDefinition\n            .create(this.name, \"DATE\")\n            .nullable(this.options.nullable)\n            .default(this.options.default ? `'${this.options.default}'` : undefined)\n            .after(this.options.addAfter);\n    }\n    getIndexDefinition() {\n        if (!this.options.index)\n            return null;\n        return IndexDefinition\n            .create()\n            .columns(this.name);\n    }\n}\n","import { AbstractColumn } from \"../AbstractColumn\";\nimport { Validators } from \"@electra/utility\";\nimport { ColumnDefinition } from \"../ColumnDefinition\";\nexport class TimeColumn extends AbstractColumn {\n    constructor(name, options) {\n        super(name);\n        this.options = Object.assign({ nullable: false, default: undefined, addAfter: undefined }, options);\n        this.validateOptions(this.options, {\n            nullable: Validators.boolean(),\n            default: Validators.regex(/^([01]\\d|2[0-3]):([0-5]\\d):([0-5]\\d)$/, 'HH:MM:SS', { optional: true }),\n            addAfter: Validators.string({ optional: true })\n        });\n    }\n    getColumnDefinition() {\n        return ColumnDefinition\n            .create(this.name, \"TIME\")\n            .nullable(this.options.nullable)\n            .default(this.options.default ? `'${this.options.default}'` : undefined)\n            .after(this.options.addAfter);\n    }\n}\n","import { AbstractColumn } from \"../AbstractColumn\";\nimport { Validators } from \"@electra/utility\";\nimport { ColumnDefinition } from \"../ColumnDefinition\";\nimport { IndexDefinition } from \"../IndexDefinition\";\nexport class DateTimeColumn extends AbstractColumn {\n    constructor(name, options) {\n        super(name);\n        this.options = Object.assign({ nullable: false, default: undefined, index: false, addAfter: undefined }, options);\n        this.validateOptions(this.options, {\n            nullable: Validators.boolean(),\n            default: Validators.regex(/^\\d{4}-(0[1-9]|1[0-2])-(0[1-9]|[12]\\d|3[01]) ([01]\\d|2[0-3]):([0-5]\\d):([0-5]\\d)$/, 'YYYY-MM-DD HH:MM:SS', { optional: true }),\n            index: Validators.boolean(),\n            addAfter: Validators.string({ optional: true })\n        });\n    }\n    getColumnDefinition() {\n        return ColumnDefinition\n            .create(this.name, \"DATETIME\")\n            .nullable(this.options.nullable)\n            .default(this.options.default ? `'${this.options.default}'` : undefined)\n            .after(this.options.addAfter);\n    }\n    getIndexDefinition() {\n        if (!this.options.index)\n            return null;\n        return IndexDefinition\n            .create()\n            .columns(this.name);\n    }\n}\n","import { BlobColumnTypeEnum } from \"./BlobColumnTypeEnum\";\nimport { Validators } from \"@electra/utility\";\nimport { AbstractColumn } from \"../AbstractColumn\";\nimport { ColumnDefinition } from \"../ColumnDefinition\";\nexport class BlobColumn extends AbstractColumn {\n    constructor(name, options) {\n        super(name);\n        this.options = Object.assign({ type: BlobColumnTypeEnum.BLOB, nullable: false, addAfter: undefined }, options);\n        this.validateOptions(this.options, {\n            type: Validators.enumValue(BlobColumnTypeEnum),\n            nullable: Validators.boolean(),\n            addAfter: Validators.string({ optional: true })\n        });\n    }\n    getColumnDefinition() {\n        return ColumnDefinition\n            .create(this.name, this.options.type)\n            .nullable(this.options.nullable)\n            .after(this.options.addAfter);\n    }\n}\n","import { AbstractColumn } from \"../AbstractColumn\";\nimport { Validators } from \"@electra/utility\";\nimport { ColumnDefinition } from \"../ColumnDefinition\";\nimport { IndexDefinition } from \"../IndexDefinition\";\nexport class EnumColumn extends AbstractColumn {\n    constructor(name, values, options) {\n        super(name);\n        this.values = values;\n        const { valid, message } = Validators\n            .all([\n            Validators.array(Validators.all([Validators.string(), Validators.minLength(1)])),\n            Validators.minLength(1)\n        ])\n            .validate(this.values);\n        if (!valid)\n            throw new TypeError(`Invalid ${this.constructor.name} values. ${message}`);\n        this.options = Object.assign({ nullable: false, default: undefined, index: false, addAfter: undefined }, options);\n        const valuesEnum = {};\n        for (const value of this.values)\n            valuesEnum[value] = value;\n        this.validateOptions(this.options, {\n            nullable: Validators.boolean(),\n            default: Validators.enumValue(valuesEnum, { optional: true }),\n            index: Validators.boolean(),\n            addAfter: Validators.string({ optional: true })\n        });\n    }\n    getColumnDefinition() {\n        return ColumnDefinition\n            .create(this.name, `ENUM('${this.values.join(\"', '\")}')`)\n            .nullable(this.options.nullable)\n            .default(this.options.default ? `'${this.options.default}'` : undefined)\n            .after(this.options.addAfter);\n    }\n    getIndexDefinition() {\n        if (!this.options.index)\n            return null;\n        return IndexDefinition\n            .create()\n            .columns(this.name);\n    }\n}\n","import { AbstractColumn } from \"../AbstractColumn\";\nimport { Validators } from \"@electra/utility\";\nimport { ColumnDefinition } from \"../ColumnDefinition\";\nimport { IndexDefinition } from \"../IndexDefinition\";\nexport class DoubleColumn extends AbstractColumn {\n    constructor(name, options) {\n        super(name);\n        this.options = Object.assign({ nullable: false, default: undefined, zeroFill: false, precision: undefined, scale: undefined, index: false, addAfter: undefined }, options);\n        this.validateOptions(this.options, {\n            nullable: Validators.boolean(),\n            default: Validators.number({ optional: true }),\n            zeroFill: Validators.boolean(),\n            precision: Validators.integer({ optional: true }),\n            scale: Validators.integer({ optional: true }),\n            index: Validators.boolean(),\n            addAfter: Validators.string({ optional: true })\n        });\n        if ((this.options.precision != null || this.options.scale != null)\n            && (this.options.precision == null || this.options.scale == null)) {\n            throw new Error(`Precision and scale must be both defined or both undefined in column ${this.name}`);\n        }\n    }\n    getColumnDefinition() {\n        const type = this.options.precision != null && this.options.scale != null\n            ? `DOUBLE(${this.options.precision}, ${this.options.scale})`\n            : \"DOUBLE\";\n        return ColumnDefinition\n            .create(this.name, type)\n            .nullable(this.options.nullable)\n            .default(typeof this.options.default === \"number\"\n            ? this.options.default.toFixed(this.options.scale)\n            : undefined)\n            .zeroFill(this.options.zeroFill)\n            .after(this.options.addAfter);\n    }\n    getIndexDefinition() {\n        if (!this.options.index)\n            return null;\n        return IndexDefinition\n            .create()\n            .columns(this.name);\n    }\n}\n","var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport { IntColumn } from \"../Column/Int/IntColumn\";\nimport { IdColumn } from \"../Column/Id/IdColumn\";\nimport { DecimalColumn } from \"../Column/Decimal/DecimalColumn\";\nimport { StringColumn } from \"../Column/String/StringColumn\";\nimport { DateColumn } from \"../Column/Date/DateColumn\";\nimport { TimeColumn } from \"../Column/Time/TimeColumn\";\nimport { DateTimeColumn } from \"../Column/DateTime/DateTimeColumn\";\nimport { BlobColumn } from \"../Column/Blob/BlobColumn\";\nimport { EnumColumn } from \"../Column/Enum/EnumColumn\";\nimport { DoubleColumn } from \"../Column/Double/DoubleColumn\";\nimport { TableEncodingEnum } from \"./Enum/TableEncodingEnum\";\nimport { TableCollationEnum } from \"./Enum/TableCollationEnum\";\nexport class Table {\n    constructor(name, connection, operations, tableExists, options) {\n        this.operations = [];\n        this.columnAdditions = [];\n        this.name = name;\n        this.connection = connection;\n        this.operations = operations;\n        this.tableExists = tableExists;\n        const tableOptions = Object.assign({}, {\n            encoding: TableEncodingEnum.UTF8MB4,\n            collation: TableCollationEnum.UTF8MB4_GENERAL_CI\n        }, options);\n        this.operations.push(() => __awaiter(this, void 0, void 0, function* () {\n            if (this.columnAdditions.length === 0)\n                return;\n            const escapedTableName = yield this.connection.escape(this.name);\n            if (!this.tableExists) {\n                // Get all column definitions\n                const columnDefinitions = this.columnAdditions.map(column => column.getColumnDefinition().get());\n                // Get all index definitions\n                const indexDefinitions = this.columnAdditions\n                    .map(column => {\n                    const definition = column.getIndexDefinition();\n                    return definition\n                        ? definition\n                            .defaultName(`${this.name.toLowerCase()}_${column.getName().toLowerCase()}_index`)\n                            .get()\n                        : null;\n                })\n                    .filter(definition => definition != null);\n                // Combine all definitions\n                const allDefinitions = [...columnDefinitions, ...indexDefinitions];\n                // Get the table options string\n                let tableOptionsString = \"\";\n                if (tableOptions.encoding)\n                    tableOptionsString += ` DEFAULT CHARACTER SET ${tableOptions.encoding}`;\n                if (tableOptions.collation)\n                    tableOptionsString += ` DEFAULT COLLATE ${tableOptions.collation}`;\n                // Create the table\n                yield this.connection.query(`CREATE TABLE ${escapedTableName} (${allDefinitions.join(\", \")})${tableOptionsString};`);\n                // Set the table exists flag\n                this.tableExists = true;\n                // Clear the column additions\n                this.columnAdditions.splice(0, this.columnAdditions.length);\n            }\n            const columnDefinitions = this.columnAdditions.map((column) => {\n                return `ADD COLUMN ${column.getColumnDefinition().get()}`;\n            });\n            const indexDefinitions = this.columnAdditions\n                .map((column) => {\n                const definition = column.getIndexDefinition();\n                if (!definition)\n                    return null;\n                definition.defaultName(`${this.name.toLowerCase()}_${column.getName().toLowerCase()}_index`);\n                return `ADD ${definition.get()}`;\n            })\n                .filter((definition) => definition != null);\n            const allDefinitions = [...columnDefinitions, ...indexDefinitions];\n            if (allDefinitions.length === 0)\n                return;\n            yield this.connection.query(`ALTER TABLE ${escapedTableName} ${allDefinitions.join(\", \")};`);\n        }));\n    }\n    id(name = \"id\") {\n        this.columnAdditions.push(new IdColumn(name));\n        return this;\n    }\n    int(name, options) {\n        this.columnAdditions.push(new IntColumn(name, options));\n        return this;\n    }\n    decimal(name, options) {\n        this.columnAdditions.push(new DecimalColumn(name, options));\n        return this;\n    }\n    double(name, options) {\n        this.columnAdditions.push(new DoubleColumn(name, options));\n        return this;\n    }\n    string(name, options) {\n        this.columnAdditions.push(new StringColumn(name, options));\n        return this;\n    }\n    enum(name, values, options) {\n        this.columnAdditions.push(new EnumColumn(name, values, options));\n        return this;\n    }\n    date(name, options) {\n        this.columnAdditions.push(new DateColumn(name, options));\n        return this;\n    }\n    time(name, options) {\n        this.columnAdditions.push(new TimeColumn(name, options));\n        return this;\n    }\n    datetime(name, options) {\n        this.columnAdditions.push(new DateTimeColumn(name, options));\n        return this;\n    }\n    blob(name, options) {\n        this.columnAdditions.push(new BlobColumn(name, options));\n        return this;\n    }\n    renameColumn(currentName, newName) {\n        this.operations.push(() => __awaiter(this, void 0, void 0, function* () {\n            yield this.connection.query(`ALTER TABLE ${yield this.connection.escape(this.name)} RENAME COLUMN ${yield this.connection.escape(currentName)} TO ${yield this.connection.escape(newName)};`);\n        }));\n        return this;\n    }\n    dropColumn(name) {\n        this.operations.push(() => __awaiter(this, void 0, void 0, function* () {\n            yield this.connection.query(`ALTER TABLE ${yield this.connection.escape(this.name)} DROP COLUMN ${yield this.connection.escape(name)};`);\n        }));\n        return this;\n    }\n    addColumnIndex(columnName) {\n        this.operations.push(() => __awaiter(this, void 0, void 0, function* () {\n            yield this.connection.query(`ALTER TABLE ${yield this.connection.escape(this.name)} ADD INDEX ${yield this.connection.escape(columnName)};`);\n        }));\n        return this;\n    }\n    dropColumnIndex(columnName) {\n        this.operations.push(() => __awaiter(this, void 0, void 0, function* () {\n            yield this.connection.query(`ALTER TABLE ${yield this.connection.escape(this.name)} DROP INDEX ${yield this.connection.escape(columnName)};`);\n        }));\n        return this;\n    }\n    setColumnNullable(columnName, nullable) {\n        this.operations.push(() => __awaiter(this, void 0, void 0, function* () {\n            yield this.connection.query(`ALTER TABLE ${yield this.connection.escape(this.name)} MODIFY COLUMN ${yield this.connection.escape(columnName)} ${nullable ? \"NULL\" : \"NOT NULL\"};`);\n        }));\n        return this;\n    }\n    setColumnDefault(columnName, defaultValue) {\n        this.operations.push(() => __awaiter(this, void 0, void 0, function* () {\n            yield this.connection.query(`ALTER TABLE ${yield this.connection.escape(this.name)} MODIFY COLUMN ${yield this.connection.escape(columnName)} DEFAULT ${typeof defaultValue === \"string\" ? `'${defaultValue}'` : defaultValue};`);\n        }));\n        return this;\n    }\n    drop() {\n        this.operations.push(() => __awaiter(this, void 0, void 0, function* () {\n            yield this.connection.query(`DROP TABLE ${yield this.connection.escape(this.name)};`);\n        }));\n        return this;\n    }\n}\n","import { Table } from \"./Table\";\nexport class Database {\n    constructor(connection, operations) {\n        this.connection = connection;\n        this.operations = operations;\n    }\n    create(tableName, options) {\n        return new Table(tableName, this.connection, this.operations, false, options);\n    }\n    table(tableName) {\n        return new Table(tableName, this.connection, this.operations, true);\n    }\n}\n","var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport { Database } from \"./Database\";\nexport class MySql {\n    constructor(connections) {\n        this.operations = [];\n        this.connections = connections;\n    }\n    database(name, connectionName) {\n        let connection;\n        if (!connectionName) {\n            const connections = this.connections.getAllByDatabaseName(name);\n            if (connections.length === 0)\n                throw new Error(`No connections found for database \"${name}\"`);\n            if (connections.length > 1)\n                throw new Error(`Multiple connections found for database \"${name}\". Connection name must be specified.`);\n            connection = connections[0];\n        }\n        else {\n            connection = this.connections.get(connectionName);\n        }\n        this.operations.push(() => __awaiter(this, void 0, void 0, function* () {\n            yield connection.query(`CREATE DATABASE IF NOT EXISTS ${yield connection.escape(name)};`);\n        }));\n        this.operations.push(() => __awaiter(this, void 0, void 0, function* () {\n            yield connection.query(`USE ${yield connection.escape(name)};`);\n        }));\n        return new Database(connection, this.operations);\n    }\n    executePendingOperations() {\n        return __awaiter(this, void 0, void 0, function* () {\n            while (this.operations.length > 0) {\n                const operation = this.operations.shift();\n                yield operation();\n            }\n        });\n    }\n}\n"],"names":["IntColumnTypeEnum","__webpack_require__","module","getter","__esModule","d","a","exports","definition","key","o","Object","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","call","Symbol","toStringTag","value","AbstractMigration","require","IndexDefinitionType","StringColumnTypeEnum","BlobColumnTypeEnum","TableEncodingEnum","TableCollationEnum","Log","red","message","console","log","blue","green","yellow","AbstractColumn","constructor","name","this","validateName","getIndexDefinition","getName","valid","Validators","all","string","minLength","regex","validate","TypeError","validateOptions","options","schema","addNullableStatement","query","nullable","addDefaultStatement","defaultValue","undefined","addIndexStatement","index","columnName","addUnsignedStatement","unsigned","addZeroFillStatement","zeroFill","addAutoIncrementStatement","autoIncrement","addPrimaryKeyStatement","primaryKey","addAfterStatement","addAfter","tableExists","ColumnDefinition","type","default","after","create","zerofill","IndexDefinition","indexColumns","indexType","INDEX","defaultName","defaultIndexName","indexName","columns","push","length","Error","indexDefinition","UNIQUE","map","column","join","IntColumn","super","assign","INT","enumValue","boolean","integer","optional","getColumnDefinition","IdColumn","DecimalColumn","precision","scale","number","toFixed","StringColumn","VARCHAR","columnType","CHAR","DateColumn","TimeColumn","DateTimeColumn","BlobColumn","BLOB","EnumColumn","values","array","valuesEnum","DoubleColumn","__awaiter","thisArg","_arguments","P","generator","Promise","resolve","reject","fulfilled","step","next","e","rejected","result","done","then","apply","Table","connection","operations","columnAdditions","tableOptions","encoding","UTF8MB4","collation","UTF8MB4_GENERAL_CI","escapedTableName","escape","allDefinitions","toLowerCase","filter","tableOptionsString","splice","id","int","decimal","double","enum","date","time","datetime","blob","renameColumn","currentName","newName","dropColumn","addColumnIndex","dropColumnIndex","setColumnNullable","setColumnDefault","drop","Database","tableName","table","MySql","connections","database","connectionName","getAllByDatabaseName","executePendingOperations","operation","shift"],"sourceRoot":""}