{"version":3,"file":"index.cjs","mappings":"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","sources":["webpack://@electra/migrate/webpack/bootstrap","webpack://@electra/migrate/webpack/runtime/compat get default export","webpack://@electra/migrate/webpack/runtime/define property getters","webpack://@electra/migrate/webpack/runtime/hasOwnProperty shorthand","webpack://@electra/migrate/webpack/runtime/make namespace object","webpack://@electra/migrate/./src/Migration/AbstractMigration.ts","webpack://@electra/migrate/external commonjs \"@electra/utility\"","webpack://@electra/migrate/external commonjs \"chalk\"","webpack://@electra/migrate/./src/Migration/Definition/Enum/IndexDefinitionTypeEnum.ts","webpack://@electra/migrate/./src/Utility/Log/Log.ts","webpack://@electra/migrate/./src/Migration/Column/AbstractColumn.ts","webpack://@electra/migrate/./src/Migration/Definition/IndexDefinition.ts","webpack://@electra/migrate/./src/Migration/Definition/ColumnDefinition.ts","webpack://@electra/migrate/./src/Migration/Column/ColumnTypeEnum.ts","webpack://@electra/migrate/./src/Migration/Database/Enum/TableEncodingEnum.ts","webpack://@electra/migrate/./src/Migration/Database/Enum/TableCollationEnum.ts","webpack://@electra/migrate/./src/Migration/Column/Int/IntColumn.ts","webpack://@electra/migrate/./src/Migration/Column/Decimal/DecimalColumn.ts","webpack://@electra/migrate/./src/Migration/Column/String/StringColumn.ts","webpack://@electra/migrate/./src/Migration/Column/Date/DateColumn.ts","webpack://@electra/migrate/./src/Migration/Column/Time/TimeColumn.ts","webpack://@electra/migrate/./src/Migration/Column/DateTime/DateTimeColumn.ts","webpack://@electra/migrate/./src/Migration/Column/Blob/BlobColumn.ts","webpack://@electra/migrate/./src/Migration/Column/Enum/EnumColumn.ts","webpack://@electra/migrate/./src/Migration/Column/Double/DoubleColumn.ts","webpack://@electra/migrate/./src/Migration/Modification/RenameColumn/RenameColumnModification.ts","webpack://@electra/migrate/./src/Migration/Modification/DropColumn/DropColumnModification.ts","webpack://@electra/migrate/./src/Migration/Modification/AddIndex/AddIndexModification.ts","webpack://@electra/migrate/./src/Migration/Modification/DropIndex/DropIndexModification.ts","webpack://@electra/migrate/./src/Migration/Modification/SetNullable/SetNullableModification.ts","webpack://@electra/migrate/./src/Migration/Modification/SetDefault/SetDefaultModification.ts","webpack://@electra/migrate/./src/Migration/Modification/DropTable/DropTableModification.ts","webpack://@electra/migrate/./src/Migration/Column/Blob/TinyBlobColumn.ts","webpack://@electra/migrate/./src/Migration/Column/Blob/MediumBlobColumn.ts","webpack://@electra/migrate/./src/Migration/Column/Blob/LongBlobColumn.ts","webpack://@electra/migrate/./src/Migration/Column/Int/SmallIntColumn.ts","webpack://@electra/migrate/./src/Migration/Column/Int/TinyIntColumn.ts","webpack://@electra/migrate/./src/Migration/Column/Int/MediumIntColumn.ts","webpack://@electra/migrate/./src/Migration/Column/Int/BigIntColumn.ts","webpack://@electra/migrate/./src/Migration/Column/Text/TextColumn.ts","webpack://@electra/migrate/./src/Migration/Column/Text/TinyTextColumn.ts","webpack://@electra/migrate/./src/Migration/Column/Text/MediumTextColumn.ts","webpack://@electra/migrate/./src/Migration/Column/Text/LongTextColumn.ts","webpack://@electra/migrate/./src/Migration/Database/Table.ts","webpack://@electra/migrate/./src/Migration/Database/Database.ts","webpack://@electra/migrate/./src/Migration/Database/MySql.ts"],"sourcesContent":["// The require scope\nvar __webpack_require__ = {};\n\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => (module['default']) :\n\t\t() => (module);\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","export class AbstractMigration {\n}\n","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"@electra/utility\");","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"chalk\");","export var IndexDefinitionTypeEnum;\n(function (IndexDefinitionTypeEnum) {\n    IndexDefinitionTypeEnum[\"INDEX\"] = \"INDEX\";\n    IndexDefinitionTypeEnum[\"UNIQUE\"] = \"UNIQUE\";\n    IndexDefinitionTypeEnum[\"FULLTEXT\"] = \"FULLTEXT\";\n})(IndexDefinitionTypeEnum || (IndexDefinitionTypeEnum = {}));\n","import chalk from \"chalk\";\nexport class Log {\n    static red(message) {\n        console.log(chalk.redBright(message));\n    }\n    static blue(message) {\n        console.log(chalk.blueBright(message));\n    }\n    static green(message) {\n        console.log(chalk.greenBright(message));\n    }\n    static yellow(message) {\n        console.log(chalk.yellowBright(message));\n    }\n}\n","import { Validators } from \"@electra/utility\";\nimport { Log } from \"../../Utility/Log/Log\";\nexport class AbstractColumn {\n    constructor(name) {\n        this.columnExists = false;\n        this.name = name;\n        const { valid, message } = this.validateColumnName(this.name);\n        if (!valid)\n            throw new TypeError(`Invalid ${this.constructor.name} name: ${message}`);\n    }\n    getIndexDefinition() {\n        return null;\n    }\n    getName() {\n        return this.name;\n    }\n    exists() {\n        return this.columnExists;\n    }\n    update() {\n        this.columnExists = true;\n        return this;\n    }\n    validateColumnName(name) {\n        return Validators\n            .all([\n            Validators.string(),\n            Validators.minLength(1),\n            Validators.regex(/^[a-zA-Z_][a-zA-Z0-9_]{0,63}$/, 'A-z, 0-9 and/or _')\n        ])\n            .validate(name);\n    }\n    validateOptions(options, schema) {\n        const { valid, message } = Validators.schema(schema).validate(options);\n        if (!valid) {\n            throw new TypeError(`Invalid ${this.constructor.name} options. ${message}`);\n        }\n        return true;\n    }\n    addNullableStatement(query, nullable) {\n        return nullable ? `${query} NULL` : `${query} NOT NULL`;\n    }\n    addDefaultStatement(query, defaultValue) {\n        return defaultValue !== undefined ? `${query} DEFAULT ${defaultValue}` : query;\n    }\n    addIndexStatement(query, index, columnName) {\n        return index ? `${query}, ADD INDEX (${columnName})` : query;\n    }\n    addUnsignedStatement(query, unsigned) {\n        return unsigned ? `${query} UNSIGNED` : query;\n    }\n    addZeroFillStatement(query, zeroFill) {\n        return zeroFill ? `${query} ZEROFILL` : query;\n    }\n    addAutoIncrementStatement(query, autoIncrement) {\n        return autoIncrement ? `${query} AUTO_INCREMENT` : query;\n    }\n    addPrimaryKeyStatement(query, primaryKey) {\n        return primaryKey ? `${query} PRIMARY KEY` : query;\n    }\n    addAfterStatement(query, addAfter, tableExists) {\n        // Log warning if createTable is true and addAfter is set\n        if (!tableExists && addAfter) {\n            Log.yellow(\"WARNING: addAfter option is ignored when creating a new table.\");\n        }\n        if (!tableExists)\n            return query;\n        if (addAfter) {\n            query += ` AFTER ${addAfter}`;\n        }\n        return query;\n    }\n}\n","import { IndexDefinitionTypeEnum } from \"./Enum/IndexDefinitionTypeEnum\";\nexport class IndexDefinition {\n    constructor() {\n        this.indexColumns = [];\n        this.indexType = IndexDefinitionTypeEnum.INDEX;\n    }\n    static create() {\n        return new IndexDefinition();\n    }\n    defaultName(name) {\n        this.defaultIndexName = name;\n        return this;\n    }\n    name(name) {\n        this.indexName = name;\n        return this;\n    }\n    columns(...columns) {\n        this.indexColumns.push(...columns);\n        return this;\n    }\n    type(type) {\n        this.indexType = type;\n        return this;\n    }\n    get() {\n        if (!this.indexColumns.length)\n            throw new Error(\"No columns defined for index\");\n        const indexName = this.indexName || this.defaultIndexName;\n        let indexDefinition = indexName && this.indexType === IndexDefinitionTypeEnum.UNIQUE ? `${this.indexType} INDEX` : this.indexType;\n        if (indexName)\n            indexDefinition += ` \\`${indexName}\\``;\n        indexDefinition += ` (${this.indexColumns.map(column => `\\`${column}\\``).join(\", \")})`;\n        return indexDefinition;\n    }\n}\n","var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nexport class ColumnDefinition {\n    constructor(name, type) {\n        this.options = {\n            nullable: undefined,\n            default: undefined,\n            dropDefault: undefined,\n            unsigned: undefined,\n            autoIncrement: undefined,\n            zeroFill: undefined,\n            primaryKey: undefined,\n            after: undefined\n        };\n        this.existingOptions = {};\n        this.name = name;\n        this.type = type;\n    }\n    static create(name, type) {\n        return new ColumnDefinition(name, type);\n    }\n    nullable(nullable) {\n        this.options.nullable = nullable;\n        return this;\n    }\n    default(value) {\n        this.options.default = value;\n        return this;\n    }\n    dropDefault() {\n        this.options.dropDefault = true;\n        return this;\n    }\n    unsigned(unsigned) {\n        this.options.unsigned = unsigned;\n        return this;\n    }\n    autoIncrement(autoIncrement) {\n        this.options.autoIncrement = autoIncrement;\n        return this;\n    }\n    zeroFill(zerofill) {\n        this.options.zeroFill = zerofill;\n        return this;\n    }\n    primaryKey(primaryKey) {\n        this.options.primaryKey = primaryKey;\n        return this;\n    }\n    after(after) {\n        this.options.after = after;\n        return this;\n    }\n    get() {\n        let definition = `\\`${this.name}\\` ${this.type}`;\n        // Unsigned\n        const unsigned = typeof this.options.unsigned === \"boolean\" ? this.options.unsigned : this.existingOptions.unsigned;\n        if (unsigned === true)\n            definition += \" UNSIGNED\";\n        // Nullable\n        const nullable = typeof this.options.nullable === \"boolean\" ? this.options.nullable : this.existingOptions.nullable;\n        definition += nullable === true ? \" NULL\" : \" NOT NULL\";\n        // Default\n        const defaultValue = this.options.default !== undefined ? this.options.default : this.existingOptions.default;\n        if (defaultValue === null)\n            definition += \" DEFAULT NULL\";\n        else if (defaultValue !== undefined)\n            definition += ` DEFAULT ${defaultValue}`;\n        else if (this.options.dropDefault === true)\n            definition += \" DROP DEFAULT\";\n        // Auto increment\n        const autoIncrement = typeof this.options.autoIncrement === \"boolean\" ? this.options.autoIncrement : this.existingOptions.autoIncrement;\n        if (autoIncrement === true)\n            definition += \" AUTO_INCREMENT\";\n        // Zero fill\n        const zeroFill = typeof this.options.zeroFill === \"boolean\" ? this.options.zeroFill : this.existingOptions.zeroFill;\n        if (zeroFill === true)\n            definition += \" ZEROFILL\";\n        // Primary key\n        const primaryKey = typeof this.options.primaryKey === \"boolean\" ? this.options.primaryKey : this.existingOptions.primaryKey;\n        if (primaryKey === true)\n            definition += \" PRIMARY KEY\";\n        // After\n        if (typeof this.options.after === \"string\")\n            definition += ` AFTER \\`${this.options.after}\\``;\n        return definition;\n    }\n    hydrateExistingOptions(connection, column, table) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const [result] = yield connection.query(`\n      SELECT\n        *\n      FROM\n        INFORMATION_SCHEMA.COLUMNS\n      WHERE\n        TABLE_NAME = \\`${table}\\`\n        AND COLUMN_NAME = \\`${column}\\`;\n    `);\n            if (!result)\n                throw new Error(`Column \"${column}\" does not exist in table \"${table}\"`);\n            this.existingType = result.COLUMN_TYPE.split(\" \").shift();\n            this.existingOptions.nullable = result.IS_NULLABLE === \"YES\";\n            this.existingOptions.default = result.COLUMN_DEFAULT === null && result.IS_NULLABLE === \"NO\" ? undefined : result.COLUMN_DEFAULT;\n            this.existingOptions.dropDefault = false;\n            this.existingOptions.unsigned = result.COLUMN_TYPE.includes(\"unsigned\");\n            this.existingOptions.autoIncrement = result.EXTRA.includes(\"auto_increment\");\n            this.existingOptions.zeroFill = result.COLUMN_TYPE.includes(\"zerofill\");\n            this.existingOptions.primaryKey = result.COLUMN_KEY === \"PRI\";\n        });\n    }\n}\n","export var ColumnTypeEnum;\n(function (ColumnTypeEnum) {\n    // BLOB\n    ColumnTypeEnum[\"BLOB\"] = \"BLOB\";\n    ColumnTypeEnum[\"TINYBLOB\"] = \"TINYBLOB\";\n    ColumnTypeEnum[\"MEDIUMBLOB\"] = \"MEDIUMBLOB\";\n    ColumnTypeEnum[\"LONGBLOB\"] = \"LONGBLOB\";\n    // DATE\n    ColumnTypeEnum[\"DATE\"] = \"DATE\";\n    // DATETIME\n    ColumnTypeEnum[\"DATETIME\"] = \"DATETIME\";\n    // DECIMAL\n    ColumnTypeEnum[\"DECIMAL\"] = \"DECIMAL\";\n    ColumnTypeEnum[\"DOUBLE\"] = \"DOUBLE\";\n    // ENUM\n    ColumnTypeEnum[\"ENUM\"] = \"ENUM\";\n    // INT\n    ColumnTypeEnum[\"INT\"] = \"INT\";\n    ColumnTypeEnum[\"TINYINT\"] = \"TINYINT\";\n    ColumnTypeEnum[\"SMALLINT\"] = \"SMALLINT\";\n    ColumnTypeEnum[\"MEDIUMINT\"] = \"MEDIUMINT\";\n    ColumnTypeEnum[\"BIGINT\"] = \"BIGINT\";\n    // STRING\n    ColumnTypeEnum[\"CHAR\"] = \"CHAR\";\n    ColumnTypeEnum[\"VARCHAR\"] = \"VARCHAR\";\n    ColumnTypeEnum[\"TEXT\"] = \"TEXT\";\n    ColumnTypeEnum[\"TINYTEXT\"] = \"TINYTEXT\";\n    ColumnTypeEnum[\"MEDIUMTEXT\"] = \"MEDIUMTEXT\";\n    ColumnTypeEnum[\"LONGTEXT\"] = \"LONGTEXT\";\n    // TIME\n    ColumnTypeEnum[\"TIME\"] = \"TIME\";\n})(ColumnTypeEnum || (ColumnTypeEnum = {}));\n","export var TableEncodingEnum;\n(function (TableEncodingEnum) {\n    TableEncodingEnum[\"UTF8\"] = \"utf8\";\n    TableEncodingEnum[\"UTF8MB4\"] = \"utf8mb4\";\n})(TableEncodingEnum || (TableEncodingEnum = {}));\n","export var TableCollationEnum;\n(function (TableCollationEnum) {\n    TableCollationEnum[\"UTF8_GENERAL_CI\"] = \"utf8_general_ci\";\n    TableCollationEnum[\"UTF8MB4_GENERAL_CI\"] = \"utf8mb4_general_ci\";\n    TableCollationEnum[\"UTF8MB4_UNICODE_CI\"] = \"utf8mb4_unicode_ci\";\n})(TableCollationEnum || (TableCollationEnum = {}));\n","import { AbstractColumn } from \"../AbstractColumn\";\nimport { Validators } from \"@electra/utility\";\nimport { IndexDefinition } from \"../../Definition/IndexDefinition\";\nimport { ColumnDefinition } from \"../../Definition/ColumnDefinition\";\nimport { ColumnTypeEnum } from \"../ColumnTypeEnum\";\nexport class IntColumn extends AbstractColumn {\n    constructor() {\n        super(...arguments);\n        this.options = {};\n        this.type = ColumnTypeEnum.INT;\n    }\n    nullable(nullable = true) {\n        const { valid, message } = Validators.boolean().validate(nullable);\n        if (valid === false)\n            throw new TypeError(`Invalid value passed to IntColumn.nullable: ${message}`);\n        this.options.nullable = nullable;\n        return this;\n    }\n    default(value) {\n        const { valid, message } = Validators.integer().validate(value);\n        if (valid === false)\n            throw new TypeError(`Invalid value passed to IntColumn.default: ${message}`);\n        this.options.default = value;\n        return this;\n    }\n    unsigned(unsigned = true) {\n        const { valid, message } = Validators.boolean().validate(unsigned);\n        if (valid === false)\n            throw new TypeError(`Invalid value passed to IntColumn.unsigned: ${message}`);\n        this.options.unsigned = unsigned;\n        return this;\n    }\n    autoIncrement(autoIncrement = true) {\n        const { valid, message } = Validators.boolean().validate(autoIncrement);\n        if (valid === false)\n            throw new TypeError(`Invalid value passed to IntColumn.autoIncrement: ${message}`);\n        this.options.autoIncrement = autoIncrement;\n        return this;\n    }\n    zeroFill(zeroFill = true) {\n        const { valid, message } = Validators.boolean().validate(zeroFill);\n        if (valid === false)\n            throw new TypeError(`Invalid value passed to IntColumn.zeroFill: ${message}`);\n        this.options.zeroFill = zeroFill;\n        return this;\n    }\n    primaryKey(primaryKey = true) {\n        const { valid, message } = Validators.boolean().validate(primaryKey);\n        if (valid === false)\n            throw new TypeError(`Invalid value passed to IntColumn.primaryKey: ${message}`);\n        this.options.primaryKey = primaryKey;\n        return this;\n    }\n    index(index = true) {\n        const { valid, message } = Validators.boolean().validate(index);\n        if (valid === false)\n            throw new TypeError(`Invalid value passed to IntColumn.index: ${message}`);\n        this.options.index = index;\n        return this;\n    }\n    after(columnName) {\n        const { valid, message } = this.validateColumnName(columnName);\n        if (valid === false)\n            throw new TypeError(`Invalid value passed to IntColumn.after: ${message}`);\n        this.options.after = columnName;\n        return this;\n    }\n    getColumnDefinition() {\n        return ColumnDefinition\n            .create(this.name, this.type)\n            .nullable(this.options.nullable)\n            .default(this.options.default)\n            .unsigned(this.options.unsigned)\n            .autoIncrement(this.options.autoIncrement)\n            .zeroFill(this.options.zeroFill)\n            .primaryKey(this.options.primaryKey)\n            .after(this.options.after);\n    }\n    getIndexDefinition() {\n        if (!this.options.index)\n            return null;\n        return IndexDefinition\n            .create()\n            .columns(this.name);\n    }\n}\n","import { AbstractColumn } from \"../AbstractColumn\";\nimport { Validators } from \"@electra/utility\";\nimport { ColumnDefinition } from \"../../Definition/ColumnDefinition\";\nimport { IndexDefinition } from \"../../Definition/IndexDefinition\";\nimport { ColumnTypeEnum } from \"../ColumnTypeEnum\";\nexport class DecimalColumn extends AbstractColumn {\n    constructor(name, precision = 8, scale = 2) {\n        super(name);\n        this.options = {};\n        this.precision = precision;\n        this.scale = scale;\n        const validator = Validators.integer();\n        const { valid: precisionValid, message: precisionMessage } = validator.validate(precision);\n        if (precisionValid === false) {\n            throw new TypeError(`Invalid precision value passed to DecimalColumn.constructor: ${precisionMessage}`);\n        }\n        const { valid: scaleValid, message: scaleMessage } = validator.validate(scale);\n        if (scaleValid === false) {\n            throw new TypeError(`Invalid scale value passed to DecimalColumn.constructor: ${scaleMessage}`);\n        }\n    }\n    nullable(nullable = true) {\n        const { valid, message } = Validators.boolean().validate(nullable);\n        if (valid === false)\n            throw new TypeError(`Invalid value passed to DecimalColumn.nullable: ${message}`);\n        this.options.nullable = nullable;\n        return this;\n    }\n    default(value) {\n        const { valid, message } = Validators.number().validate(value);\n        if (valid === false)\n            throw new TypeError(`Invalid value passed to DecimalColumn.default: ${message}`);\n        this.options.default = value;\n        return this;\n    }\n    unsigned(unsigned = true) {\n        const { valid, message } = Validators.boolean().validate(unsigned);\n        if (valid === false)\n            throw new TypeError(`Invalid value passed to DecimalColumn.unsigned: ${message}`);\n        this.options.unsigned = unsigned;\n        return this;\n    }\n    zeroFill(zeroFill = true) {\n        const { valid, message } = Validators.boolean().validate(zeroFill);\n        if (valid === false)\n            throw new TypeError(`Invalid value passed to DecimalColumn.zeroFill: ${message}`);\n        this.options.zeroFill = zeroFill;\n        return this;\n    }\n    index(index = true) {\n        const { valid, message } = Validators.boolean().validate(index);\n        if (valid === false)\n            throw new TypeError(`Invalid value passed to DecimalColumn.index: ${message}`);\n        this.options.index = index;\n        return this;\n    }\n    after(columnName) {\n        const { valid, message } = this.validateColumnName(columnName);\n        if (valid === false)\n            throw new TypeError(`Invalid value passed to DecimalColumn.after: ${message}`);\n        this.options.after = columnName;\n        return this;\n    }\n    getColumnDefinition() {\n        return ColumnDefinition\n            .create(this.name, `${ColumnTypeEnum.DECIMAL}(${this.precision}, ${this.scale})`)\n            .nullable(this.options.nullable)\n            .default(typeof this.options.default === \"number\"\n            ? this.options.default.toFixed(this.scale)\n            : undefined)\n            .unsigned(this.options.unsigned)\n            .zeroFill(this.options.zeroFill)\n            .after(this.options.after);\n    }\n    getIndexDefinition() {\n        if (!this.options.index)\n            return null;\n        return IndexDefinition\n            .create()\n            .columns(this.name);\n    }\n}\n","import { AbstractColumn } from \"../AbstractColumn\";\nimport { Validators } from \"@electra/utility\";\nimport { ColumnDefinition } from \"../../Definition/ColumnDefinition\";\nimport { IndexDefinition } from \"../../Definition/IndexDefinition\";\nimport { ColumnTypeEnum } from \"../ColumnTypeEnum\";\nexport class StringColumn extends AbstractColumn {\n    constructor(name, length = 255) {\n        super(name);\n        this.options = {};\n        this.type = ColumnTypeEnum.VARCHAR;\n        this.length = length;\n        const { valid, message } = Validators.integer().validate(length);\n        if (valid === false)\n            throw new TypeError(`Invalid value passed to StringColumn.constructor: ${message}`);\n    }\n    nullable(nullable = true) {\n        const { valid, message } = Validators.boolean().validate(nullable);\n        if (valid === false)\n            throw new TypeError(`Invalid value passed to StringColumn.nullable: ${message}`);\n        this.options.nullable = nullable;\n        return this;\n    }\n    primaryKey(primaryKey = true) {\n        const { valid, message } = Validators.boolean().validate(primaryKey);\n        if (valid === false)\n            throw new TypeError(`Invalid value passed to StringColumn.primaryKey: ${message}`);\n        this.options.primaryKey = primaryKey;\n        return this;\n    }\n    default(value) {\n        const { valid, message } = Validators.string().validate(value);\n        if (valid === false)\n            throw new TypeError(`Invalid value passed to StringColumn.default: ${message}`);\n        this.options.default = value;\n        return this;\n    }\n    index(index = true) {\n        const { valid, message } = Validators.boolean().validate(index);\n        if (valid === false)\n            throw new TypeError(`Invalid value passed to StringColumn.index: ${message}`);\n        this.options.index = index;\n        return this;\n    }\n    after(columnName) {\n        const { valid, message } = this.validateColumnName(columnName);\n        if (valid === false)\n            throw new TypeError(`Invalid value passed to StringColumn.after: ${message}`);\n        this.options.after = columnName;\n        return this;\n    }\n    getColumnDefinition() {\n        return ColumnDefinition\n            .create(this.name, `${this.type}(${this.length})`)\n            .nullable(this.options.nullable)\n            .primaryKey(this.options.primaryKey)\n            .default(this.options.default ? `'${this.options.default}'` : undefined)\n            .after(this.options.after);\n    }\n    getIndexDefinition() {\n        if (!this.options.index)\n            return null;\n        return IndexDefinition\n            .create()\n            .columns(this.name);\n    }\n}\n","import { Validators } from \"@electra/utility\";\nimport { AbstractColumn } from \"../AbstractColumn\";\nimport { IndexDefinition } from \"../../Definition/IndexDefinition\";\nimport { ColumnDefinition } from \"../../Definition/ColumnDefinition\";\nimport { ColumnTypeEnum } from \"../ColumnTypeEnum\";\nexport class DateColumn extends AbstractColumn {\n    constructor() {\n        super(...arguments);\n        this.options = {};\n    }\n    nullable(nullable = true) {\n        const { valid, message } = Validators.boolean().validate(nullable);\n        if (valid === false)\n            throw new TypeError(`Invalid value passed to DateColumn.nullable: ${message}`);\n        this.options.nullable = nullable;\n        return this;\n    }\n    default(value) {\n        const { valid, message } = Validators\n            .regex(/^\\d{4}-(0[1-9]|1[0-2])-(0[1-9]|[12]\\d|3[01])$/, \"YYYY-MM-DD\")\n            .validate(value);\n        if (valid === false)\n            throw new TypeError(`Invalid value passed to DateColumn.default: ${message}`);\n        this.options.default = value;\n        return this;\n    }\n    index(index = true) {\n        const { valid, message } = Validators.boolean().validate(index);\n        if (valid === false)\n            throw new TypeError(`Invalid value passed to DateColumn.index: ${message}`);\n        this.options.index = index;\n        return this;\n    }\n    after(columnName) {\n        const { valid, message } = this.validateColumnName(columnName);\n        if (valid === false)\n            throw new TypeError(`Invalid value passed to DateColumn.after: ${message}`);\n        this.options.after = columnName;\n        return this;\n    }\n    getColumnDefinition() {\n        return ColumnDefinition\n            .create(this.name, ColumnTypeEnum.DATE)\n            .nullable(this.options.nullable)\n            .default(this.options.default ? `'${this.options.default}'` : undefined)\n            .after(this.options.after);\n    }\n    getIndexDefinition() {\n        if (!this.options.index)\n            return null;\n        return IndexDefinition\n            .create()\n            .columns(this.name);\n    }\n}\n","import { AbstractColumn } from \"../AbstractColumn\";\nimport { Validators } from \"@electra/utility\";\nimport { ColumnDefinition } from \"../../Definition/ColumnDefinition\";\nimport { ColumnTypeEnum } from \"../ColumnTypeEnum\";\nexport class TimeColumn extends AbstractColumn {\n    constructor() {\n        super(...arguments);\n        this.options = {};\n    }\n    nullable(nullable = true) {\n        const { valid, message } = Validators.boolean().validate(nullable);\n        if (valid === false)\n            throw new TypeError(`Invalid value passed to TimeColumn.nullable: ${message}`);\n        this.options.nullable = nullable;\n        return this;\n    }\n    default(value) {\n        const { valid, message } = Validators\n            .regex(/^([01]\\d|2[0-3]):([0-5]\\d):([0-5]\\d)$/, \"HH:MM:SS\", { optional: true })\n            .validate(value);\n        if (valid === false)\n            throw new TypeError(`Invalid value passed to TimeColumn.default: ${message}`);\n        this.options.default = value;\n        return this;\n    }\n    after(columnName) {\n        const { valid, message } = this.validateColumnName(columnName);\n        if (valid === false)\n            throw new TypeError(`Invalid value passed to TimeColumn.after: ${message}`);\n        this.options.after = columnName;\n        return this;\n    }\n    getColumnDefinition() {\n        return ColumnDefinition\n            .create(this.name, ColumnTypeEnum.TIME)\n            .nullable(this.options.nullable)\n            .default(this.options.default ? `'${this.options.default}'` : undefined)\n            .after(this.options.after);\n    }\n}\n","import { AbstractColumn } from \"../AbstractColumn\";\nimport { Validators } from \"@electra/utility\";\nimport { ColumnDefinition } from \"../../Definition/ColumnDefinition\";\nimport { IndexDefinition } from \"../../Definition/IndexDefinition\";\nimport { ColumnTypeEnum } from \"../ColumnTypeEnum\";\nexport class DateTimeColumn extends AbstractColumn {\n    constructor() {\n        super(...arguments);\n        this.options = {};\n    }\n    nullable(nullable = true) {\n        const { valid, message } = Validators.boolean().validate(nullable);\n        if (valid === false)\n            throw new TypeError(`Invalid value passed to DateTimeColumn.nullable: ${message}`);\n        this.options.nullable = nullable;\n        return this;\n    }\n    default(value) {\n        const { valid, message } = Validators\n            .regex(/^\\d{4}-(0[1-9]|1[0-2])-(0[1-9]|[12]\\d|3[01]) ([01]\\d|2[0-3]):([0-5]\\d):([0-5]\\d)$/, \"YYYY-MM-DD HH:MM:SS\")\n            .validate(value);\n        if (valid === false)\n            throw new TypeError(`Invalid value passed to DateTimeColumn.default: ${message}`);\n        this.options.default = value;\n        return this;\n    }\n    index(index = true) {\n        const { valid, message } = Validators.boolean().validate(index);\n        if (valid === false)\n            throw new TypeError(`Invalid value passed to DateTimeColumn.index: ${message}`);\n        this.options.index = index;\n        return this;\n    }\n    after(columnName) {\n        const { valid, message } = this.validateColumnName(columnName);\n        if (valid === false)\n            throw new TypeError(`Invalid value passed to DateTimeColumn.after: ${message}`);\n        this.options.after = columnName;\n        return this;\n    }\n    getColumnDefinition() {\n        return ColumnDefinition\n            .create(this.name, ColumnTypeEnum.DATETIME)\n            .nullable(this.options.nullable)\n            .default(this.options.default ? `'${this.options.default}'` : undefined)\n            .after(this.options.after);\n    }\n    getIndexDefinition() {\n        if (!this.options.index)\n            return null;\n        return IndexDefinition\n            .create()\n            .columns(this.name);\n    }\n}\n","import { Validators } from \"@electra/utility\";\nimport { AbstractColumn } from \"../AbstractColumn\";\nimport { ColumnDefinition } from \"../../Definition/ColumnDefinition\";\nimport { ColumnTypeEnum } from \"../ColumnTypeEnum\";\nexport class BlobColumn extends AbstractColumn {\n    constructor() {\n        super(...arguments);\n        this.options = {};\n        this.type = ColumnTypeEnum.BLOB;\n    }\n    nullable(nullable = true) {\n        const { valid, message } = Validators.boolean().validate(nullable);\n        if (valid === false)\n            throw new TypeError(`Invalid value passed to BlobColumn.nullable: ${message}`);\n        this.options.nullable = nullable;\n        return this;\n    }\n    after(columnName) {\n        const { valid, message } = this.validateColumnName(columnName);\n        if (valid === false)\n            throw new TypeError(`Invalid value passed to BlobColumn.after: ${message}`);\n        this.options.after = columnName;\n        return this;\n    }\n    getColumnDefinition() {\n        return ColumnDefinition\n            .create(this.name, this.type)\n            .nullable(this.options.nullable)\n            .after(this.options.after);\n    }\n}\n","import { AbstractColumn } from \"../AbstractColumn\";\nimport { Validators } from \"@electra/utility\";\nimport { ColumnDefinition } from \"../../Definition/ColumnDefinition\";\nimport { IndexDefinition } from \"../../Definition/IndexDefinition\";\nimport { ColumnTypeEnum } from \"../ColumnTypeEnum\";\nexport class EnumColumn extends AbstractColumn {\n    constructor(name, values) {\n        super(name);\n        this.options = {};\n        this.values = values;\n        const { valid, message } = Validators\n            .all([\n            Validators.array(Validators.all([Validators.string(), Validators.minLength(1)])),\n            Validators.minLength(1)\n        ])\n            .validate(this.values);\n        if (!valid)\n            throw new TypeError(`Invalid ${this.constructor.name} values. ${message}`);\n    }\n    nullable(nullable = true) {\n        const { valid, message } = Validators.boolean().validate(nullable);\n        if (valid === false)\n            throw new TypeError(`Invalid value passed to EnumColumn.nullable: ${message}`);\n        this.options.nullable = nullable;\n        return this;\n    }\n    default(value) {\n        const { valid, message } = Validators.string().validate(value);\n        const valuesEnum = {};\n        for (const value of this.values)\n            valuesEnum[value] = value;\n        const { valid: enumValueValid, message: enumValueMessage } = Validators.enumValue(valuesEnum).validate(value);\n        if (valid === false || enumValueValid === false)\n            throw new TypeError(`Invalid value passed to EnumColumn.default: ${message || enumValueMessage}`);\n        this.options.default = value;\n        return this;\n    }\n    index(index = true) {\n        const { valid, message } = Validators.boolean().validate(index);\n        if (valid === false)\n            throw new TypeError(`Invalid value passed to EnumColumn.index: ${message}`);\n        this.options.index = index;\n        return this;\n    }\n    after(columnName) {\n        const { valid, message } = this.validateColumnName(columnName);\n        if (valid === false)\n            throw new TypeError(`Invalid value passed to EnumColumn.after: ${message}`);\n        this.options.after = columnName;\n        return this;\n    }\n    getColumnDefinition() {\n        return ColumnDefinition\n            .create(this.name, `${ColumnTypeEnum.ENUM}('${this.values.join(\"', '\")}')`)\n            .nullable(this.options.nullable)\n            .default(this.options.default ? `'${this.options.default}'` : undefined)\n            .after(this.options.after);\n    }\n    getIndexDefinition() {\n        if (!this.options.index)\n            return null;\n        return IndexDefinition\n            .create()\n            .columns(this.name);\n    }\n}\n","import { AbstractColumn } from \"../AbstractColumn\";\nimport { Validators } from \"@electra/utility\";\nimport { ColumnDefinition } from \"../../Definition/ColumnDefinition\";\nimport { IndexDefinition } from \"../../Definition/IndexDefinition\";\nimport { ColumnTypeEnum } from \"../ColumnTypeEnum\";\nexport class DoubleColumn extends AbstractColumn {\n    constructor(name, precision, scale) {\n        super(name);\n        this.options = {};\n        this.precision = precision;\n        this.scale = scale;\n        const validator = Validators.integer({ optional: true });\n        const { valid: precisionValid, message: precisionMessage } = validator.validate(precision);\n        if (precisionValid === false) {\n            throw new TypeError(`Invalid precision value passed to DoubleColumn.constructor: ${precisionMessage}`);\n        }\n        const { valid: scaleValid, message: scaleMessage } = validator.validate(scale);\n        if (scaleValid === false) {\n            throw new TypeError(`Invalid scale value passed to DoubleColumn.constructor: ${scaleMessage}`);\n        }\n        if ((this.precision != null || this.scale != null)\n            && (this.precision == null || this.scale == null)) {\n            throw new Error(`Precision and scale must be both defined or both undefined in column ${this.name}`);\n        }\n    }\n    nullable(nullable = true) {\n        const { valid, message } = Validators.boolean().validate(nullable);\n        if (valid === false)\n            throw new TypeError(`Invalid value passed to DoubleColumn.nullable: ${message}`);\n        this.options.nullable = nullable;\n        return this;\n    }\n    default(value) {\n        const { valid, message } = Validators.number().validate(value);\n        if (valid === false)\n            throw new TypeError(`Invalid value passed to DoubleColumn.default: ${message}`);\n        this.options.default = value;\n        return this;\n    }\n    zeroFill(zeroFill = true) {\n        const { valid, message } = Validators.boolean().validate(zeroFill);\n        if (valid === false)\n            throw new TypeError(`Invalid value passed to DoubleColumn.zeroFill: ${message}`);\n        this.options.zeroFill = zeroFill;\n        return this;\n    }\n    index(index = true) {\n        const { valid, message } = Validators.boolean().validate(index);\n        if (valid === false)\n            throw new TypeError(`Invalid value passed to DoubleColumn.index: ${message}`);\n        this.options.index = index;\n        return this;\n    }\n    after(columnName) {\n        const { valid, message } = this.validateColumnName(columnName);\n        if (valid === false)\n            throw new TypeError(`Invalid value passed to DoubleColumn.after: ${message}`);\n        this.options.after = columnName;\n        return this;\n    }\n    getColumnDefinition() {\n        const type = this.precision != null && this.scale != null\n            ? `${ColumnTypeEnum.DOUBLE}(${this.precision}, ${this.scale})`\n            : ColumnTypeEnum.DOUBLE;\n        return ColumnDefinition\n            .create(this.name, type)\n            .nullable(this.options.nullable)\n            .default(typeof this.options.default === \"number\"\n            ? this.options.default.toFixed(this.scale)\n            : undefined)\n            .zeroFill(this.options.zeroFill)\n            .after(this.options.after);\n    }\n    getIndexDefinition() {\n        if (!this.options.index)\n            return null;\n        return IndexDefinition\n            .create()\n            .columns(this.name);\n    }\n}\n","export class RenameColumnModification {\n    constructor(currentName, newName) {\n        this.currentName = currentName;\n        this.newName = newName;\n    }\n    getModificationDefinition() {\n        return `RENAME COLUMN \\`${this.currentName}\\` TO \\`${this.newName}\\``;\n    }\n}\n","export class DropColumnModification {\n    constructor(name) {\n        this.name = name;\n    }\n    getModificationDefinition() {\n        return `DROP COLUMN \\`${this.name}\\``;\n    }\n}\n","export class AddIndexModification {\n    constructor(definition) {\n        this.definition = definition;\n    }\n    getModificationDefinition() {\n        return `ADD ${this.definition.get()}`;\n    }\n}\n","export class DropIndexModification {\n    constructor(name) {\n        this.name = name;\n    }\n    getModificationDefinition() {\n        return `DROP INDEX \\`${this.name}\\``;\n    }\n}\n","export class SetNullableModification {\n    constructor(name, nullable) {\n        this.name = name;\n        this.nullable = nullable;\n    }\n    getModificationDefinition() {\n        return `MODIFY COLUMN \\`${this.name}\\` ${this.nullable ? \"NULL\" : \"NOT NULL\"}`;\n    }\n}\n","export class SetDefaultModification {\n    constructor(name, defaultValue) {\n        this.name = name;\n        this.defaultValue = defaultValue;\n    }\n    getModificationDefinition() {\n        let defaultValue = this.defaultValue;\n        if (typeof defaultValue === \"string\")\n            defaultValue = `'${defaultValue}'`;\n        else if (defaultValue == null)\n            defaultValue = \"NULL\";\n        return `MODIFY COLUMN \\`${this.name}\\` DEFAULT ${defaultValue}`;\n    }\n}\n","export class DropTableModification {\n    constructor(name) {\n        this.name = name;\n    }\n    getModificationDefinition() {\n        return `DROP TABLE IF EXISTS \\`${this.name}\\``;\n    }\n}\n","import { ColumnTypeEnum } from \"../ColumnTypeEnum\";\nimport { BlobColumn } from \"./BlobColumn\";\nexport class TinyBlobColumn extends BlobColumn {\n    constructor() {\n        super(...arguments);\n        this.type = ColumnTypeEnum.TINYBLOB;\n    }\n}\n","import { ColumnTypeEnum } from \"../ColumnTypeEnum\";\nimport { BlobColumn } from \"./BlobColumn\";\nexport class MediumBlobColumn extends BlobColumn {\n    constructor() {\n        super(...arguments);\n        this.type = ColumnTypeEnum.MEDIUMBLOB;\n    }\n}\n","import { ColumnTypeEnum } from \"../ColumnTypeEnum\";\nimport { BlobColumn } from \"./BlobColumn\";\nexport class LongBlobColumn extends BlobColumn {\n    constructor() {\n        super(...arguments);\n        this.type = ColumnTypeEnum.LONGBLOB;\n    }\n}\n","import { ColumnTypeEnum } from \"../ColumnTypeEnum\";\nimport { IntColumn } from \"./IntColumn\";\nexport class SmallIntColumn extends IntColumn {\n    constructor() {\n        super(...arguments);\n        this.type = ColumnTypeEnum.SMALLINT;\n    }\n}\n","import { ColumnTypeEnum } from \"../ColumnTypeEnum\";\nimport { IntColumn } from \"./IntColumn\";\nexport class TinyIntColumn extends IntColumn {\n    constructor() {\n        super(...arguments);\n        this.type = ColumnTypeEnum.TINYINT;\n    }\n}\n","import { ColumnTypeEnum } from \"../ColumnTypeEnum\";\nimport { IntColumn } from \"./IntColumn\";\nexport class MediumIntColumn extends IntColumn {\n    constructor() {\n        super(...arguments);\n        this.type = ColumnTypeEnum.MEDIUMINT;\n    }\n}\n","import { ColumnTypeEnum } from \"../ColumnTypeEnum\";\nimport { IntColumn } from \"./IntColumn\";\nexport class BigIntColumn extends IntColumn {\n    constructor() {\n        super(...arguments);\n        this.type = ColumnTypeEnum.BIGINT;\n    }\n}\n","import { AbstractColumn } from \"../AbstractColumn\";\nimport { Validators } from \"@electra/utility\";\nimport { ColumnDefinition } from \"../../Definition/ColumnDefinition\";\nimport { ColumnTypeEnum } from \"../ColumnTypeEnum\";\nexport class TextColumn extends AbstractColumn {\n    constructor() {\n        super(...arguments);\n        this.options = {};\n        this.type = ColumnTypeEnum.TEXT;\n    }\n    nullable(nullable = true) {\n        const { valid, message } = Validators.boolean().validate(nullable);\n        if (valid === false)\n            throw new TypeError(`Invalid value passed to TextColumn.nullable: ${message}`);\n        this.options.nullable = nullable;\n        return this;\n    }\n    after(columnName) {\n        const { valid, message } = this.validateColumnName(columnName);\n        if (valid === false)\n            throw new TypeError(`Invalid value passed to TextColumn.after: ${message}`);\n        this.options.after = columnName;\n        return this;\n    }\n    getColumnDefinition() {\n        return ColumnDefinition\n            .create(this.name, this.type)\n            .nullable(this.options.nullable)\n            .after(this.options.after);\n    }\n}\n","import { ColumnTypeEnum } from \"../ColumnTypeEnum\";\nimport { TextColumn } from \"./TextColumn\";\nexport class TinyTextColumn extends TextColumn {\n    constructor() {\n        super(...arguments);\n        this.type = ColumnTypeEnum.TINYTEXT;\n    }\n}\n","import { ColumnTypeEnum } from \"../ColumnTypeEnum\";\nimport { TextColumn } from \"./TextColumn\";\nexport class MediumTextColumn extends TextColumn {\n    constructor() {\n        super(...arguments);\n        this.type = ColumnTypeEnum.MEDIUMTEXT;\n    }\n}\n","import { ColumnTypeEnum } from \"../ColumnTypeEnum\";\nimport { TextColumn } from \"./TextColumn\";\nexport class LongTextColumn extends TextColumn {\n    constructor() {\n        super(...arguments);\n        this.type = ColumnTypeEnum.LONGTEXT;\n    }\n}\n","var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport { IntColumn } from \"../Column/Int/IntColumn\";\nimport { DecimalColumn } from \"../Column/Decimal/DecimalColumn\";\nimport { StringColumn } from \"../Column/String/StringColumn\";\nimport { DateColumn } from \"../Column/Date/DateColumn\";\nimport { TimeColumn } from \"../Column/Time/TimeColumn\";\nimport { DateTimeColumn } from \"../Column/DateTime/DateTimeColumn\";\nimport { BlobColumn } from \"../Column/Blob/BlobColumn\";\nimport { EnumColumn } from \"../Column/Enum/EnumColumn\";\nimport { DoubleColumn } from \"../Column/Double/DoubleColumn\";\nimport { TableEncodingEnum } from \"./Enum/TableEncodingEnum\";\nimport { TableCollationEnum } from \"./Enum/TableCollationEnum\";\nimport { RenameColumnModification } from \"../Modification/RenameColumn/RenameColumnModification\";\nimport { DropColumnModification } from \"../Modification/DropColumn/DropColumnModification\";\nimport { IndexDefinition } from \"../Definition/IndexDefinition\";\nimport { AddIndexModification } from \"../Modification/AddIndex/AddIndexModification\";\nimport { DropIndexModification } from \"../Modification/DropIndex/DropIndexModification\";\nimport { SetNullableModification } from \"../Modification/SetNullable/SetNullableModification\";\nimport { SetDefaultModification } from \"../Modification/SetDefault/SetDefaultModification\";\nimport { DropTableModification } from \"../Modification/DropTable/DropTableModification\";\nimport { TinyBlobColumn } from \"../Column/Blob/TinyBlobColumn\";\nimport { MediumBlobColumn } from \"../Column/Blob/MediumBlobColumn\";\nimport { LongBlobColumn } from \"../Column/Blob/LongBlobColumn\";\nimport { SmallIntColumn } from \"../Column/Int/SmallIntColumn\";\nimport { TinyIntColumn } from \"../Column/Int/TinyIntColumn\";\nimport { MediumIntColumn } from \"../Column/Int/MediumIntColumn\";\nimport { BigIntColumn } from \"../Column/Int/BigIntColumn\";\nimport { TextColumn } from \"../Column/Text/TextColumn\";\nimport { TinyTextColumn } from \"../Column/Text/TinyTextColumn\";\nimport { MediumTextColumn } from \"../Column/Text/MediumTextColumn\";\nimport { LongTextColumn } from \"../Column/Text/LongTextColumn\";\nexport class Table {\n    constructor(name, connection, operations, tableExists, options) {\n        this.columns = [];\n        this.alterModifications = [];\n        this.standaloneModifications = [];\n        this.name = name;\n        this.connection = connection;\n        this.tableExists = tableExists;\n        const tableOptions = Object.assign({}, {\n            encoding: TableEncodingEnum.UTF8MB4,\n            collation: TableCollationEnum.UTF8MB4_GENERAL_CI\n        }, options);\n        operations.push(() => __awaiter(this, void 0, void 0, function* () {\n            if (this.columns.length === 0\n                && this.alterModifications.length === 0\n                && this.standaloneModifications.length === 0)\n                return;\n            const { columnsToAdd, columnsToModify } = this\n                .columns\n                .reduce((acc, column) => {\n                column.exists() ? acc.columnsToModify.push(column) : acc.columnsToAdd.push(column);\n                return acc;\n            }, { columnsToAdd: [], columnsToModify: [] });\n            yield Promise.all(columnsToModify.map(column => column.hydrateExistingOptions(this.connection, column.getName(), this.name)));\n            // Create query\n            if (!this.tableExists && columnsToAdd.length > 0) {\n                const createQuery = this.getCreateTableQuery(columnsToAdd, tableOptions);\n                if (createQuery) {\n                    // Create the table\n                    yield this.connection.query(createQuery);\n                    // Set the table exists flag\n                    this.tableExists = true;\n                    // Clear the column additions\n                    columnsToAdd.splice(0, columnsToAdd.length);\n                }\n            }\n            // Alter query\n            if (columnsToAdd.length > 0 || columnsToModify.length > 0 || this.alterModifications.length > 0) {\n                const alterQuery = this.getAlterTableQuery(columnsToAdd, columnsToModify, this.alterModifications);\n                if (alterQuery) {\n                    yield this.connection.query(alterQuery);\n                }\n            }\n            if (this.standaloneModifications.length > 0) {\n                const alterQuery = this.standaloneModifications.map(mod => mod.getModificationDefinition()).join(\"; \");\n                yield this.connection.query(`${alterQuery};`);\n            }\n        }));\n    }\n    id(name = \"id\") {\n        const column = (new IntColumn(name))\n            .unsigned()\n            .autoIncrement()\n            .primaryKey();\n        this.columns.push(column);\n        return column;\n    }\n    int(name) {\n        const column = new IntColumn(name);\n        this.columns.push(column);\n        return column;\n    }\n    tinyint(name) {\n        const column = new TinyIntColumn(name);\n        this.columns.push(column);\n        return column;\n    }\n    smallint(name) {\n        const column = new SmallIntColumn(name);\n        this.columns.push(column);\n        return column;\n    }\n    mediumint(name) {\n        const column = new MediumIntColumn(name);\n        this.columns.push(column);\n        return column;\n    }\n    bigint(name) {\n        const column = new BigIntColumn(name);\n        this.columns.push(column);\n        return column;\n    }\n    decimal(name, precision = 8, scale = 2) {\n        const column = new DecimalColumn(name, precision, scale);\n        this.columns.push(column);\n        return column;\n    }\n    double(name, precision, scale) {\n        const column = new DoubleColumn(name, precision, scale);\n        this.columns.push(column);\n        return column;\n    }\n    string(name, length = 255) {\n        const column = new StringColumn(name, length);\n        this.columns.push(column);\n        return column;\n    }\n    text(name) {\n        const column = new TextColumn(name);\n        this.columns.push(column);\n        return column;\n    }\n    tinytext(name) {\n        const column = new TinyTextColumn(name);\n        this.columns.push(column);\n        return column;\n    }\n    mediumtext(name) {\n        const column = new MediumTextColumn(name);\n        this.columns.push(column);\n        return column;\n    }\n    longtext(name) {\n        const column = new LongTextColumn(name);\n        this.columns.push(column);\n        return column;\n    }\n    enum(name, values) {\n        const column = new EnumColumn(name, values);\n        this.columns.push(column);\n        return column;\n    }\n    date(name) {\n        const column = new DateColumn(name);\n        this.columns.push(column);\n        return column;\n    }\n    time(name) {\n        const column = new TimeColumn(name);\n        this.columns.push(column);\n        return column;\n    }\n    datetime(name) {\n        const column = new DateTimeColumn(name);\n        this.columns.push(column);\n        return column;\n    }\n    blob(name) {\n        const column = new BlobColumn(name);\n        this.columns.push(column);\n        return column;\n    }\n    tinyblob(name) {\n        const column = new TinyBlobColumn(name);\n        this.columns.push(column);\n        return column;\n    }\n    mediumblob(name) {\n        const column = new MediumBlobColumn(name);\n        this.columns.push(column);\n        return column;\n    }\n    longblob(name) {\n        const column = new LongBlobColumn(name);\n        this.columns.push(column);\n        return column;\n    }\n    renameColumn(currentName, newName) {\n        this.alterModifications.push(new RenameColumnModification(currentName, newName));\n        return this;\n    }\n    dropColumn(name) {\n        this.alterModifications.push(new DropColumnModification(name));\n        return this;\n    }\n    addIndex(columnNames, name, type) {\n        const indexDefinition = IndexDefinition\n            .create()\n            .defaultName(this.getDefaultIndexName(...columnNames))\n            .columns(...columnNames);\n        if (name)\n            indexDefinition.name(name);\n        if (type)\n            indexDefinition.type(type);\n        this.alterModifications.push(new AddIndexModification(indexDefinition));\n        return this;\n    }\n    dropIndex(...args) {\n        const [first] = args;\n        const name = Array.isArray(first) ? this.getDefaultIndexName(...first) : first;\n        this.alterModifications.push(new DropIndexModification(name));\n        return this;\n    }\n    setNullable(columnName, nullable) {\n        this.alterModifications.push(new SetNullableModification(columnName, nullable));\n        return this;\n    }\n    setDefault(columnName, defaultValue) {\n        this.alterModifications.push(new SetDefaultModification(columnName, defaultValue));\n        return this;\n    }\n    drop() {\n        this.standaloneModifications.push(new DropTableModification(this.name));\n        return this;\n    }\n    getDefaultIndexName(...columnNames) {\n        const columnNamesString = columnNames.sort().join(\"_\").toLowerCase();\n        return `${this.name.toLowerCase()}_${columnNamesString}_index`;\n    }\n    getCreateTableQuery(columnAdditions, tableOptions) {\n        // Column definitions\n        const columnDefinitions = columnAdditions.map(column => column.getColumnDefinition().get());\n        // Index definitions\n        const indexDefinitions = columnAdditions\n            .map(column => {\n            const definition = column.getIndexDefinition();\n            if (!definition)\n                return null;\n            return definition\n                .defaultName(this.getDefaultIndexName(column.getName()))\n                .get();\n        })\n            .filter(definition => definition != null);\n        // Combined definitions\n        const allDefinitions = [...columnDefinitions, ...indexDefinitions];\n        // Charset and collation\n        let tableOptionsString = \"\";\n        if (tableOptions.encoding)\n            tableOptionsString += ` DEFAULT CHARACTER SET ${tableOptions.encoding}`;\n        if (tableOptions.collation)\n            tableOptionsString += ` DEFAULT COLLATE ${tableOptions.collation}`;\n        // Build full query\n        return `CREATE TABLE \\`${this.name}\\` (${allDefinitions.join(\", \")})${tableOptionsString};`;\n    }\n    getAlterTableQuery(columnAdditions, columnModifications, alterModifications) {\n        // Columns to add\n        const addColumnDefinitions = columnAdditions.map((column) => {\n            return `ADD COLUMN ${column.getColumnDefinition().get()}`;\n        });\n        // Index definitions\n        const indexDefinitions = columnAdditions\n            .map((column) => {\n            const definition = column.getIndexDefinition();\n            if (!definition)\n                return null;\n            definition.defaultName(this.getDefaultIndexName(column.getName()));\n            return `ADD ${definition.get()}`;\n        })\n            .filter((definition) => definition != null);\n        // Modifications\n        const modificationDefinitions = [\n            ...columnModifications.map(mod => `MODIFY COLUMN ${mod.getColumnDefinition().get()}`),\n            ...alterModifications.map(mod => mod.getModificationDefinition())\n        ];\n        const allDefinitions = [...addColumnDefinitions, ...indexDefinitions, ...modificationDefinitions];\n        if (allDefinitions.length === 0)\n            return null;\n        return `ALTER TABLE \\`${this.name}\\` ${allDefinitions.join(\", \")};`;\n    }\n}\n","import { Table } from \"./Table\";\nexport class Database {\n    constructor(connection, operations) {\n        this.connection = connection;\n        this.operations = operations;\n    }\n    create(tableName, options) {\n        return new Table(tableName, this.connection, this.operations, false, options);\n    }\n    table(tableName) {\n        return new Table(tableName, this.connection, this.operations, true);\n    }\n}\n","var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport { Database } from \"./Database\";\nexport class MySql {\n    constructor(connections) {\n        this.operations = [];\n        this.connections = connections;\n    }\n    database(name, connectionName) {\n        let connection;\n        if (!connectionName) {\n            const connections = this.connections.getAllByDatabaseName(name);\n            if (connections.length === 0)\n                throw new Error(`No connections found for database \"${name}\"`);\n            if (connections.length > 1)\n                throw new Error(`Multiple connections found for database \"${name}\". Connection name must be specified.`);\n            connection = connections[0];\n        }\n        else {\n            connection = this.connections.get(connectionName);\n        }\n        this.operations.push(() => __awaiter(this, void 0, void 0, function* () {\n            yield connection.query(`CREATE DATABASE IF NOT EXISTS ${yield connection.escape(name)};`);\n        }));\n        this.operations.push(() => __awaiter(this, void 0, void 0, function* () {\n            yield connection.query(`USE ${yield connection.escape(name)};`);\n        }));\n        return new Database(connection, this.operations);\n    }\n    executePendingOperations() {\n        return __awaiter(this, void 0, void 0, function* () {\n            while (this.operations.length > 0) {\n                const operation = this.operations.shift();\n                yield operation();\n            }\n        });\n    }\n}\n"],"names":["__webpack_require__","module","getter","__esModule","d","a","exports","definition","key","o","Object","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","call","Symbol","toStringTag","value","AbstractMigration","require","IndexDefinitionTypeEnum","Log","red","message","console","log","blue","green","yellow","AbstractColumn","constructor","name","this","columnExists","valid","validateColumnName","TypeError","getIndexDefinition","getName","exists","update","Validators","all","string","minLength","regex","validate","validateOptions","options","schema","addNullableStatement","query","nullable","addDefaultStatement","defaultValue","undefined","addIndexStatement","index","columnName","addUnsignedStatement","unsigned","addZeroFillStatement","zeroFill","addAutoIncrementStatement","autoIncrement","addPrimaryKeyStatement","primaryKey","addAfterStatement","addAfter","tableExists","IndexDefinition","indexColumns","indexType","INDEX","create","defaultName","defaultIndexName","indexName","columns","push","type","length","Error","indexDefinition","UNIQUE","map","column","join","ColumnTypeEnum","TableEncodingEnum","TableCollationEnum","ColumnDefinition","default","dropDefault","after","existingOptions","zerofill","hydrateExistingOptions","connection","table","thisArg","_arguments","generator","result","existingType","COLUMN_TYPE","split","shift","IS_NULLABLE","COLUMN_DEFAULT","includes","EXTRA","COLUMN_KEY","P","Promise","resolve","reject","fulfilled","step","next","e","rejected","done","then","apply","IntColumn","super","arguments","INT","boolean","integer","getColumnDefinition","DecimalColumn","precision","scale","validator","precisionValid","precisionMessage","scaleValid","scaleMessage","number","DECIMAL","toFixed","StringColumn","VARCHAR","DateColumn","DATE","TimeColumn","optional","TIME","DateTimeColumn","DATETIME","BlobColumn","BLOB","EnumColumn","values","array","valuesEnum","enumValueValid","enumValueMessage","enumValue","ENUM","DoubleColumn","DOUBLE","RenameColumnModification","currentName","newName","getModificationDefinition","DropColumnModification","AddIndexModification","DropIndexModification","SetNullableModification","SetDefaultModification","DropTableModification","TinyBlobColumn","TINYBLOB","MediumBlobColumn","MEDIUMBLOB","LongBlobColumn","LONGBLOB","SmallIntColumn","SMALLINT","TinyIntColumn","TINYINT","MediumIntColumn","MEDIUMINT","BigIntColumn","BIGINT","TextColumn","TEXT","TinyTextColumn","TINYTEXT","MediumTextColumn","MEDIUMTEXT","LongTextColumn","LONGTEXT","Table","operations","alterModifications","standaloneModifications","tableOptions","assign","encoding","UTF8MB4","collation","UTF8MB4_GENERAL_CI","columnsToAdd","columnsToModify","reduce","acc","createQuery","getCreateTableQuery","splice","alterQuery","getAlterTableQuery","mod","id","int","tinyint","smallint","mediumint","bigint","decimal","double","text","tinytext","mediumtext","longtext","enum","date","time","datetime","blob","tinyblob","mediumblob","longblob","renameColumn","dropColumn","addIndex","columnNames","getDefaultIndexName","dropIndex","args","first","Array","isArray","setNullable","setDefault","drop","columnNamesString","sort","toLowerCase","columnAdditions","allDefinitions","filter","tableOptionsString","columnModifications","Database","tableName","MySql","connections","database","connectionName","getAllByDatabaseName","escape","executePendingOperations","operation"],"sourceRoot":""}