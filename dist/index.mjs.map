{"version":3,"file":"index.mjs","mappings":"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","sources":["webpack://@electra/migrate/webpack/bootstrap","webpack://@electra/migrate/./src/Migration/Column/Int/IntColumnTypeEnum.ts","webpack://@electra/migrate/webpack/runtime/define property getters","webpack://@electra/migrate/webpack/runtime/hasOwnProperty shorthand","webpack://@electra/migrate/./src/Migration/AbstractMigration.ts","webpack://@electra/migrate/external module \"@electra/utility\"","webpack://@electra/migrate/external module \"chalk\"","webpack://@electra/migrate/./src/Utility/Log/Log.ts","webpack://@electra/migrate/./src/Migration/Column/AbstractColumn.ts","webpack://@electra/migrate/./src/Migration/Column/ColumnDefinition.ts","webpack://@electra/migrate/./src/Migration/Column/IndexDefinitionType.ts","webpack://@electra/migrate/./src/Migration/Column/String/StringColumnTypeEnum.ts","webpack://@electra/migrate/./src/Migration/Column/Blob/BlobColumnTypeEnum.ts","webpack://@electra/migrate/./src/Migration/Database/Enum/TableEncodingEnum.ts","webpack://@electra/migrate/./src/Migration/Database/Enum/TableCollationEnum.ts","webpack://@electra/migrate/./src/Migration/Column/IndexDefinition.ts","webpack://@electra/migrate/./src/Migration/Column/Int/IntColumn.ts","webpack://@electra/migrate/./src/Migration/Column/Id/IdColumn.ts","webpack://@electra/migrate/./src/Migration/Column/Decimal/DecimalColumn.ts","webpack://@electra/migrate/./src/Migration/Column/String/StringColumn.ts","webpack://@electra/migrate/./src/Migration/Column/Date/DateColumn.ts","webpack://@electra/migrate/./src/Migration/Column/Time/TimeColumn.ts","webpack://@electra/migrate/./src/Migration/Column/DateTime/DateTimeColumn.ts","webpack://@electra/migrate/./src/Migration/Column/Blob/BlobColumn.ts","webpack://@electra/migrate/./src/Migration/Column/Enum/EnumColumn.ts","webpack://@electra/migrate/./src/Migration/Column/Double/DoubleColumn.ts","webpack://@electra/migrate/./src/Migration/Database/Table.ts","webpack://@electra/migrate/./src/Migration/Database/Database.ts","webpack://@electra/migrate/./src/Migration/Database/MySql.ts"],"sourcesContent":["// The require scope\nvar __webpack_require__ = {};\n\n","export var IntColumnTypeEnum;\n(function (IntColumnTypeEnum) {\n    IntColumnTypeEnum[\"INT\"] = \"INT\";\n    IntColumnTypeEnum[\"TINYINT\"] = \"TINYINT\";\n    IntColumnTypeEnum[\"SMALLINT\"] = \"SMALLINT\";\n    IntColumnTypeEnum[\"MEDIUMINT\"] = \"MEDIUMINT\";\n    IntColumnTypeEnum[\"BIGINT\"] = \"BIGINT\";\n})(IntColumnTypeEnum || (IntColumnTypeEnum = {}));\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","export class AbstractMigration {\n}\n","var x = y => { var x = {}; __webpack_require__.d(x, y); return x; }\nvar y = x => () => x\nconst __WEBPACK_NAMESPACE_OBJECT__ = x({ [\"Validators\"]: () => __WEBPACK_EXTERNAL_MODULE__electra_utility_78eadf20__.Validators });","var x = y => { var x = {}; __webpack_require__.d(x, y); return x; }\nvar y = x => () => x\nconst __WEBPACK_NAMESPACE_OBJECT__ = x({ [\"default\"]: () => __WEBPACK_EXTERNAL_MODULE_chalk__[\"default\"] });","import chalk from \"chalk\";\nexport class Log {\n    static red(message) {\n        console.log(chalk.redBright(message));\n    }\n    static blue(message) {\n        console.log(chalk.blueBright(message));\n    }\n    static green(message) {\n        console.log(chalk.greenBright(message));\n    }\n    static yellow(message) {\n        console.log(chalk.yellowBright(message));\n    }\n}\n","import { Validators } from \"@electra/utility\";\nimport { Log } from \"../../Utility/Log/Log\";\nexport class AbstractColumn {\n    constructor(name) {\n        this.name = name;\n        this.validateName(this.name);\n    }\n    getIndexDefinition() {\n        return null;\n    }\n    getName() {\n        return this.name;\n    }\n    validateName(name) {\n        const { valid, message } = Validators\n            .all([\n            Validators.string(),\n            Validators.minLength(1),\n            Validators.regex(/^[a-zA-Z_][a-zA-Z0-9_]{0,63}$/, 'A-z, 0-9 and/or _')\n        ])\n            .validate(name);\n        if (!valid)\n            throw new TypeError(`Invalid ${this.constructor.name} name: ${message}`);\n        return true;\n    }\n    validateOptions(options, schema) {\n        const { valid, message } = Validators.schema(schema).validate(options);\n        if (!valid) {\n            throw new TypeError(`Invalid ${this.constructor.name} options. ${message}`);\n        }\n        return true;\n    }\n    addNullableStatement(query, nullable) {\n        return nullable ? `${query} NULL` : `${query} NOT NULL`;\n    }\n    addDefaultStatement(query, defaultValue) {\n        return defaultValue !== undefined ? `${query} DEFAULT ${defaultValue}` : query;\n    }\n    addIndexStatement(query, index, columnName) {\n        return index ? `${query}, ADD INDEX (${columnName})` : query;\n    }\n    addUnsignedStatement(query, unsigned) {\n        return unsigned ? `${query} UNSIGNED` : query;\n    }\n    addZeroFillStatement(query, zeroFill) {\n        return zeroFill ? `${query} ZEROFILL` : query;\n    }\n    addAutoIncrementStatement(query, autoIncrement) {\n        return autoIncrement ? `${query} AUTO_INCREMENT` : query;\n    }\n    addPrimaryKeyStatement(query, primaryKey) {\n        return primaryKey ? `${query} PRIMARY KEY` : query;\n    }\n    addAfterStatement(query, addAfter, tableExists) {\n        // Log warning if createTable is true and addAfter is set\n        if (!tableExists && addAfter) {\n            Log.yellow(\"WARNING: addAfter option is ignored when creating a new table.\");\n        }\n        if (!tableExists)\n            return query;\n        if (addAfter) {\n            query += ` AFTER ${addAfter}`;\n        }\n        return query;\n    }\n}\n","export class ColumnDefinition {\n    constructor(name, type) {\n        this.options = {\n            nullable: undefined,\n            default: undefined,\n            unsigned: undefined,\n            autoIncrement: undefined,\n            zeroFill: undefined,\n            primaryKey: undefined,\n            after: undefined\n        };\n        this.name = name;\n        this.type = type;\n    }\n    static create(name, type) {\n        return new ColumnDefinition(name, type);\n    }\n    nullable(nullable) {\n        this.options.nullable = nullable;\n        return this;\n    }\n    default(value) {\n        this.options.default = value;\n        return this;\n    }\n    unsigned(unsigned) {\n        this.options.unsigned = unsigned;\n        return this;\n    }\n    autoIncrement(autoIncrement) {\n        this.options.autoIncrement = autoIncrement;\n        return this;\n    }\n    zeroFill(zerofill) {\n        this.options.zeroFill = zerofill;\n        return this;\n    }\n    primaryKey(primaryKey) {\n        this.options.primaryKey = primaryKey;\n        return this;\n    }\n    after(after) {\n        this.options.after = after;\n        return this;\n    }\n    get() {\n        let definition = `\\`${this.name}\\` ${this.type}`;\n        if (this.options.unsigned === true)\n            definition += \" UNSIGNED\";\n        if (typeof this.options.nullable === \"boolean\")\n            definition += this.options.nullable ? \" NULL\" : \" NOT NULL\";\n        if (this.options.default !== undefined)\n            definition += ` DEFAULT ${this.options.default}`;\n        if (this.options.autoIncrement === true)\n            definition += \" AUTO_INCREMENT\";\n        if (this.options.zeroFill === true)\n            definition += \" ZEROFILL\";\n        if (this.options.primaryKey === true)\n            definition += \" PRIMARY KEY\";\n        if (typeof this.options.after === \"string\")\n            definition += ` AFTER \\`${this.options.after}\\``;\n        return definition;\n    }\n}\n","export var IndexDefinitionType;\n(function (IndexDefinitionType) {\n    IndexDefinitionType[\"INDEX\"] = \"INDEX\";\n    IndexDefinitionType[\"UNIQUE\"] = \"UNIQUE\";\n    IndexDefinitionType[\"FULLTEXT\"] = \"FULLTEXT\";\n})(IndexDefinitionType || (IndexDefinitionType = {}));\n","export var StringColumnTypeEnum;\n(function (StringColumnTypeEnum) {\n    StringColumnTypeEnum[\"CHAR\"] = \"CHAR\";\n    StringColumnTypeEnum[\"VARCHAR\"] = \"VARCHAR\";\n    StringColumnTypeEnum[\"TEXT\"] = \"TEXT\";\n    StringColumnTypeEnum[\"TINYTEXT\"] = \"TINYTEXT\";\n    StringColumnTypeEnum[\"MEDIUMTEXT\"] = \"MEDIUMTEXT\";\n    StringColumnTypeEnum[\"LONGTEXT\"] = \"LONGTEXT\";\n})(StringColumnTypeEnum || (StringColumnTypeEnum = {}));\n","export var BlobColumnTypeEnum;\n(function (BlobColumnTypeEnum) {\n    BlobColumnTypeEnum[\"BLOB\"] = \"BLOB\";\n    BlobColumnTypeEnum[\"TINYBLOB\"] = \"TINYBLOB\";\n    BlobColumnTypeEnum[\"MEDIUMBLOB\"] = \"MEDIUMBLOB\";\n    BlobColumnTypeEnum[\"LONGBLOB\"] = \"LONGBLOB\";\n})(BlobColumnTypeEnum || (BlobColumnTypeEnum = {}));\n","export var TableEncodingEnum;\n(function (TableEncodingEnum) {\n    TableEncodingEnum[\"UTF8\"] = \"utf8\";\n    TableEncodingEnum[\"UTF8MB4\"] = \"utf8mb4\";\n})(TableEncodingEnum || (TableEncodingEnum = {}));\n","export var TableCollationEnum;\n(function (TableCollationEnum) {\n    TableCollationEnum[\"UTF8_GENERAL_CI\"] = \"utf8_general_ci\";\n    TableCollationEnum[\"UTF8MB4_GENERAL_CI\"] = \"utf8mb4_general_ci\";\n    TableCollationEnum[\"UTF8MB4_UNICODE_CI\"] = \"utf8mb4_unicode_ci\";\n})(TableCollationEnum || (TableCollationEnum = {}));\n","import { IndexDefinitionType } from \"./IndexDefinitionType\";\nexport class IndexDefinition {\n    constructor() {\n        this.indexColumns = [];\n        this.indexType = IndexDefinitionType.INDEX;\n    }\n    static create() {\n        return new IndexDefinition();\n    }\n    defaultName(name) {\n        this.defaultIndexName = name;\n        return this;\n    }\n    name(name) {\n        this.indexName = name;\n        return this;\n    }\n    columns(...columns) {\n        this.indexColumns.push(...columns);\n        return this;\n    }\n    type(type) {\n        this.indexType = type;\n        return this;\n    }\n    get() {\n        if (!this.indexColumns.length)\n            throw new Error(\"No columns defined for index\");\n        const indexName = this.indexName || this.defaultIndexName;\n        let indexDefinition = indexName && this.indexType === IndexDefinitionType.UNIQUE ? `${this.indexType} INDEX` : this.indexType;\n        if (indexName)\n            indexDefinition += ` \\`${indexName}\\``;\n        indexDefinition += ` (${this.indexColumns.map(column => `\\`${column}\\``).join(\", \")})`;\n        return indexDefinition;\n    }\n}\n","import { IntColumnTypeEnum } from \"./IntColumnTypeEnum\";\nimport { AbstractColumn } from \"../AbstractColumn\";\nimport { Validators } from \"@electra/utility\";\nimport { ColumnDefinition } from \"../ColumnDefinition\";\nimport { IndexDefinition } from \"../IndexDefinition\";\nexport class IntColumn extends AbstractColumn {\n    constructor(name, options) {\n        super(name);\n        this.options = Object.assign({ type: IntColumnTypeEnum.INT, nullable: false, default: undefined, unsigned: false, autoIncrement: false, zeroFill: false, primaryKey: false, index: false, addAfter: undefined }, options);\n        this.validateOptions(this.options, {\n            type: Validators.enumValue(IntColumnTypeEnum),\n            nullable: Validators.boolean(),\n            default: Validators.integer({ optional: true }),\n            unsigned: Validators.boolean(),\n            autoIncrement: Validators.boolean(),\n            zeroFill: Validators.boolean(),\n            primaryKey: Validators.boolean(),\n            index: Validators.boolean(),\n            addAfter: Validators.string({ optional: true })\n        });\n    }\n    getColumnDefinition() {\n        return ColumnDefinition\n            .create(this.name, this.options.type)\n            .nullable(this.options.nullable)\n            .default(this.options.default)\n            .unsigned(this.options.unsigned)\n            .autoIncrement(this.options.autoIncrement)\n            .zeroFill(this.options.zeroFill)\n            .primaryKey(this.options.primaryKey)\n            .after(this.options.addAfter);\n    }\n    getIndexDefinition() {\n        if (!this.options.index)\n            return null;\n        return IndexDefinition\n            .create()\n            .columns(this.name);\n    }\n}\n","import { IntColumnTypeEnum } from \"../Int/IntColumnTypeEnum\";\nimport { IntColumn } from \"../Int/IntColumn\";\nexport class IdColumn extends IntColumn {\n    constructor(name) {\n        super(name, {\n            type: IntColumnTypeEnum.INT,\n            nullable: false,\n            default: undefined,\n            unsigned: true,\n            autoIncrement: true,\n            zeroFill: false,\n            primaryKey: true,\n            index: false\n        });\n    }\n}\n","import { AbstractColumn } from \"../AbstractColumn\";\nimport { Validators } from \"@electra/utility\";\nimport { ColumnDefinition } from \"../ColumnDefinition\";\nimport { IndexDefinition } from \"../IndexDefinition\";\nexport class DecimalColumn extends AbstractColumn {\n    constructor(name, options) {\n        super(name);\n        this.options = Object.assign({ nullable: false, default: undefined, unsigned: false, zeroFill: false, precision: 10, scale: 2, index: false, addAfter: undefined }, options);\n        this.validateOptions(this.options, {\n            nullable: Validators.boolean(),\n            default: Validators.number({ optional: true }),\n            unsigned: Validators.boolean(),\n            zeroFill: Validators.boolean(),\n            precision: Validators.integer(),\n            scale: Validators.integer(),\n            index: Validators.boolean(),\n            addAfter: Validators.string({ optional: true })\n        });\n    }\n    getColumnDefinition() {\n        return ColumnDefinition\n            .create(this.name, `DECIMAL(${this.options.precision}, ${this.options.scale})`)\n            .nullable(this.options.nullable)\n            .default(typeof this.options.default === \"number\"\n            ? this.options.default.toFixed(this.options.scale)\n            : undefined)\n            .unsigned(this.options.unsigned)\n            .zeroFill(this.options.zeroFill)\n            .after(this.options.addAfter);\n    }\n    getIndexDefinition() {\n        if (!this.options.index)\n            return null;\n        return IndexDefinition\n            .create()\n            .columns(this.name);\n    }\n}\n","import { StringColumnTypeEnum } from \"./StringColumnTypeEnum\";\nimport { AbstractColumn } from \"../AbstractColumn\";\nimport { Validators } from \"@electra/utility\";\nimport { ColumnDefinition } from \"../ColumnDefinition\";\nimport { IndexDefinition } from \"../IndexDefinition\";\nexport class StringColumn extends AbstractColumn {\n    constructor(name, options) {\n        super(name);\n        const type = (options === null || options === void 0 ? void 0 : options.type) || StringColumnTypeEnum.VARCHAR;\n        this.options = Object.assign({ type: type, nullable: false, primaryKey: false, default: undefined, length: type !== StringColumnTypeEnum.VARCHAR ? undefined : 255, index: false, addAfter: undefined }, options);\n        this.validateOptions(this.options, {\n            type: Validators.enumValue(StringColumnTypeEnum),\n            nullable: Validators.boolean(),\n            primaryKey: Validators.boolean(),\n            default: Validators.string({ optional: true }),\n            length: Validators.integer({ optional: true }),\n            index: Validators.boolean(),\n            addAfter: Validators.string({ optional: true })\n        });\n    }\n    getColumnDefinition() {\n        let columnType = this.options.type;\n        if (this.options.type === StringColumnTypeEnum.CHAR || this.options.type === StringColumnTypeEnum.VARCHAR) {\n            if (this.options.length !== undefined)\n                columnType += `(${this.options.length})`;\n        }\n        return ColumnDefinition\n            .create(this.name, columnType)\n            .nullable(this.options.nullable)\n            .primaryKey(this.options.primaryKey)\n            .default(this.options.default ? `'${this.options.default}'` : undefined)\n            .after(this.options.addAfter);\n    }\n    getIndexDefinition() {\n        if (!this.options.index)\n            return null;\n        return IndexDefinition\n            .create()\n            .columns(this.name);\n    }\n}\n","import { Validators } from \"@electra/utility\";\nimport { AbstractColumn } from \"../AbstractColumn\";\nimport { ColumnDefinition } from \"../ColumnDefinition\";\nimport { IndexDefinition } from \"../IndexDefinition\";\nexport class DateColumn extends AbstractColumn {\n    constructor(name, options) {\n        super(name);\n        this.options = Object.assign({ nullable: false, default: undefined, index: false, addAfter: undefined }, options);\n        this.validateOptions(this.options, {\n            nullable: Validators.boolean(),\n            default: Validators.regex(/^\\d{4}-(0[1-9]|1[0-2])-(0[1-9]|[12]\\d|3[01])$/, 'YYYY-MM-DD', { optional: true }),\n            index: Validators.boolean(),\n            addAfter: Validators.string({ optional: true })\n        });\n    }\n    getColumnDefinition() {\n        return ColumnDefinition\n            .create(this.name, \"DATE\")\n            .nullable(this.options.nullable)\n            .default(this.options.default ? `'${this.options.default}'` : undefined)\n            .after(this.options.addAfter);\n    }\n    getIndexDefinition() {\n        if (!this.options.index)\n            return null;\n        return IndexDefinition\n            .create()\n            .columns(this.name);\n    }\n}\n","import { AbstractColumn } from \"../AbstractColumn\";\nimport { Validators } from \"@electra/utility\";\nimport { ColumnDefinition } from \"../ColumnDefinition\";\nexport class TimeColumn extends AbstractColumn {\n    constructor(name, options) {\n        super(name);\n        this.options = Object.assign({ nullable: false, default: undefined, addAfter: undefined }, options);\n        this.validateOptions(this.options, {\n            nullable: Validators.boolean(),\n            default: Validators.regex(/^([01]\\d|2[0-3]):([0-5]\\d):([0-5]\\d)$/, 'HH:MM:SS', { optional: true }),\n            addAfter: Validators.string({ optional: true })\n        });\n    }\n    getColumnDefinition() {\n        return ColumnDefinition\n            .create(this.name, \"TIME\")\n            .nullable(this.options.nullable)\n            .default(this.options.default ? `'${this.options.default}'` : undefined)\n            .after(this.options.addAfter);\n    }\n}\n","import { AbstractColumn } from \"../AbstractColumn\";\nimport { Validators } from \"@electra/utility\";\nimport { ColumnDefinition } from \"../ColumnDefinition\";\nimport { IndexDefinition } from \"../IndexDefinition\";\nexport class DateTimeColumn extends AbstractColumn {\n    constructor(name, options) {\n        super(name);\n        this.options = Object.assign({ nullable: false, default: undefined, index: false, addAfter: undefined }, options);\n        this.validateOptions(this.options, {\n            nullable: Validators.boolean(),\n            default: Validators.regex(/^\\d{4}-(0[1-9]|1[0-2])-(0[1-9]|[12]\\d|3[01]) ([01]\\d|2[0-3]):([0-5]\\d):([0-5]\\d)$/, 'YYYY-MM-DD HH:MM:SS', { optional: true }),\n            index: Validators.boolean(),\n            addAfter: Validators.string({ optional: true })\n        });\n    }\n    getColumnDefinition() {\n        return ColumnDefinition\n            .create(this.name, \"DATETIME\")\n            .nullable(this.options.nullable)\n            .default(this.options.default ? `'${this.options.default}'` : undefined)\n            .after(this.options.addAfter);\n    }\n    getIndexDefinition() {\n        if (!this.options.index)\n            return null;\n        return IndexDefinition\n            .create()\n            .columns(this.name);\n    }\n}\n","import { BlobColumnTypeEnum } from \"./BlobColumnTypeEnum\";\nimport { Validators } from \"@electra/utility\";\nimport { AbstractColumn } from \"../AbstractColumn\";\nimport { ColumnDefinition } from \"../ColumnDefinition\";\nexport class BlobColumn extends AbstractColumn {\n    constructor(name, options) {\n        super(name);\n        this.options = Object.assign({ type: BlobColumnTypeEnum.BLOB, nullable: false, addAfter: undefined }, options);\n        this.validateOptions(this.options, {\n            type: Validators.enumValue(BlobColumnTypeEnum),\n            nullable: Validators.boolean(),\n            addAfter: Validators.string({ optional: true })\n        });\n    }\n    getColumnDefinition() {\n        return ColumnDefinition\n            .create(this.name, this.options.type)\n            .nullable(this.options.nullable)\n            .after(this.options.addAfter);\n    }\n}\n","import { AbstractColumn } from \"../AbstractColumn\";\nimport { Validators } from \"@electra/utility\";\nimport { ColumnDefinition } from \"../ColumnDefinition\";\nimport { IndexDefinition } from \"../IndexDefinition\";\nexport class EnumColumn extends AbstractColumn {\n    constructor(name, values, options) {\n        super(name);\n        this.values = values;\n        const { valid, message } = Validators\n            .all([\n            Validators.array(Validators.all([Validators.string(), Validators.minLength(1)])),\n            Validators.minLength(1)\n        ])\n            .validate(this.values);\n        if (!valid)\n            throw new TypeError(`Invalid ${this.constructor.name} values. ${message}`);\n        this.options = Object.assign({ nullable: false, default: undefined, index: false, addAfter: undefined }, options);\n        const valuesEnum = {};\n        for (const value of this.values)\n            valuesEnum[value] = value;\n        this.validateOptions(this.options, {\n            nullable: Validators.boolean(),\n            default: Validators.enumValue(valuesEnum, { optional: true }),\n            index: Validators.boolean(),\n            addAfter: Validators.string({ optional: true })\n        });\n    }\n    getColumnDefinition() {\n        return ColumnDefinition\n            .create(this.name, `ENUM('${this.values.join(\"', '\")}')`)\n            .nullable(this.options.nullable)\n            .default(this.options.default ? `'${this.options.default}'` : undefined)\n            .after(this.options.addAfter);\n    }\n    getIndexDefinition() {\n        if (!this.options.index)\n            return null;\n        return IndexDefinition\n            .create()\n            .columns(this.name);\n    }\n}\n","import { AbstractColumn } from \"../AbstractColumn\";\nimport { Validators } from \"@electra/utility\";\nimport { ColumnDefinition } from \"../ColumnDefinition\";\nimport { IndexDefinition } from \"../IndexDefinition\";\nexport class DoubleColumn extends AbstractColumn {\n    constructor(name, options) {\n        super(name);\n        this.options = Object.assign({ nullable: false, default: undefined, zeroFill: false, precision: undefined, scale: undefined, index: false, addAfter: undefined }, options);\n        this.validateOptions(this.options, {\n            nullable: Validators.boolean(),\n            default: Validators.number({ optional: true }),\n            zeroFill: Validators.boolean(),\n            precision: Validators.integer({ optional: true }),\n            scale: Validators.integer({ optional: true }),\n            index: Validators.boolean(),\n            addAfter: Validators.string({ optional: true })\n        });\n        if ((this.options.precision != null || this.options.scale != null)\n            && (this.options.precision == null || this.options.scale == null)) {\n            throw new Error(`Precision and scale must be both defined or both undefined in column ${this.name}`);\n        }\n    }\n    getColumnDefinition() {\n        const type = this.options.precision != null && this.options.scale != null\n            ? `DOUBLE(${this.options.precision}, ${this.options.scale})`\n            : \"DOUBLE\";\n        return ColumnDefinition\n            .create(this.name, type)\n            .nullable(this.options.nullable)\n            .default(typeof this.options.default === \"number\"\n            ? this.options.default.toFixed(this.options.scale)\n            : undefined)\n            .zeroFill(this.options.zeroFill)\n            .after(this.options.addAfter);\n    }\n    getIndexDefinition() {\n        if (!this.options.index)\n            return null;\n        return IndexDefinition\n            .create()\n            .columns(this.name);\n    }\n}\n","var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport { IntColumn } from \"../Column/Int/IntColumn\";\nimport { IdColumn } from \"../Column/Id/IdColumn\";\nimport { DecimalColumn } from \"../Column/Decimal/DecimalColumn\";\nimport { StringColumn } from \"../Column/String/StringColumn\";\nimport { DateColumn } from \"../Column/Date/DateColumn\";\nimport { TimeColumn } from \"../Column/Time/TimeColumn\";\nimport { DateTimeColumn } from \"../Column/DateTime/DateTimeColumn\";\nimport { BlobColumn } from \"../Column/Blob/BlobColumn\";\nimport { EnumColumn } from \"../Column/Enum/EnumColumn\";\nimport { DoubleColumn } from \"../Column/Double/DoubleColumn\";\nimport { TableEncodingEnum } from \"./Enum/TableEncodingEnum\";\nimport { TableCollationEnum } from \"./Enum/TableCollationEnum\";\nexport class Table {\n    constructor(name, connection, operations, tableExists, options) {\n        this.operations = [];\n        this.columnAdditions = [];\n        this.name = name;\n        this.connection = connection;\n        this.operations = operations;\n        this.tableExists = tableExists;\n        const tableOptions = Object.assign({}, {\n            encoding: TableEncodingEnum.UTF8MB4,\n            collation: TableCollationEnum.UTF8MB4_GENERAL_CI\n        }, options);\n        this.operations.push(() => __awaiter(this, void 0, void 0, function* () {\n            if (this.columnAdditions.length === 0)\n                return;\n            const escapedTableName = yield this.connection.escape(this.name);\n            if (!this.tableExists) {\n                // Get all column definitions\n                const columnDefinitions = this.columnAdditions.map(column => column.getColumnDefinition().get());\n                // Get all index definitions\n                const indexDefinitions = this.columnAdditions\n                    .map(column => {\n                    const definition = column.getIndexDefinition();\n                    return definition\n                        ? definition\n                            .defaultName(`${this.name.toLowerCase()}_${column.getName().toLowerCase()}_index`)\n                            .get()\n                        : null;\n                })\n                    .filter(definition => definition != null);\n                // Combine all definitions\n                const allDefinitions = [...columnDefinitions, ...indexDefinitions];\n                // Get the table options string\n                let tableOptionsString = \"\";\n                if (tableOptions.encoding)\n                    tableOptionsString += ` DEFAULT CHARACTER SET ${tableOptions.encoding}`;\n                if (tableOptions.collation)\n                    tableOptionsString += ` DEFAULT COLLATE ${tableOptions.collation}`;\n                // Create the table\n                yield this.connection.query(`CREATE TABLE ${escapedTableName} (${allDefinitions.join(\", \")})${tableOptionsString};`);\n                // Set the table exists flag\n                this.tableExists = true;\n                // Clear the column additions\n                this.columnAdditions.splice(0, this.columnAdditions.length);\n            }\n            const columnDefinitions = this.columnAdditions.map((column) => {\n                return `ADD COLUMN ${column.getColumnDefinition().get()}`;\n            });\n            const indexDefinitions = this.columnAdditions\n                .map((column) => {\n                const definition = column.getIndexDefinition();\n                if (!definition)\n                    return null;\n                definition.defaultName(`${this.name.toLowerCase()}_${column.getName().toLowerCase()}_index`);\n                return `ADD ${definition.get()}`;\n            })\n                .filter((definition) => definition != null);\n            const allDefinitions = [...columnDefinitions, ...indexDefinitions];\n            if (allDefinitions.length === 0)\n                return;\n            yield this.connection.query(`ALTER TABLE ${escapedTableName} ${allDefinitions.join(\", \")};`);\n        }));\n    }\n    id(name = \"id\") {\n        this.columnAdditions.push(new IdColumn(name));\n        return this;\n    }\n    int(name, options) {\n        this.columnAdditions.push(new IntColumn(name, options));\n        return this;\n    }\n    decimal(name, options) {\n        this.columnAdditions.push(new DecimalColumn(name, options));\n        return this;\n    }\n    double(name, options) {\n        this.columnAdditions.push(new DoubleColumn(name, options));\n        return this;\n    }\n    string(name, options) {\n        this.columnAdditions.push(new StringColumn(name, options));\n        return this;\n    }\n    enum(name, values, options) {\n        this.columnAdditions.push(new EnumColumn(name, values, options));\n        return this;\n    }\n    date(name, options) {\n        this.columnAdditions.push(new DateColumn(name, options));\n        return this;\n    }\n    time(name, options) {\n        this.columnAdditions.push(new TimeColumn(name, options));\n        return this;\n    }\n    datetime(name, options) {\n        this.columnAdditions.push(new DateTimeColumn(name, options));\n        return this;\n    }\n    blob(name, options) {\n        this.columnAdditions.push(new BlobColumn(name, options));\n        return this;\n    }\n    renameColumn(currentName, newName) {\n        this.operations.push(() => __awaiter(this, void 0, void 0, function* () {\n            yield this.connection.query(`ALTER TABLE ${yield this.connection.escape(this.name)} RENAME COLUMN ${yield this.connection.escape(currentName)} TO ${yield this.connection.escape(newName)};`);\n        }));\n        return this;\n    }\n    dropColumn(name) {\n        this.operations.push(() => __awaiter(this, void 0, void 0, function* () {\n            yield this.connection.query(`ALTER TABLE ${yield this.connection.escape(this.name)} DROP COLUMN ${yield this.connection.escape(name)};`);\n        }));\n        return this;\n    }\n    addColumnIndex(columnName) {\n        this.operations.push(() => __awaiter(this, void 0, void 0, function* () {\n            yield this.connection.query(`ALTER TABLE ${yield this.connection.escape(this.name)} ADD INDEX ${yield this.connection.escape(columnName)};`);\n        }));\n        return this;\n    }\n    dropColumnIndex(columnName) {\n        this.operations.push(() => __awaiter(this, void 0, void 0, function* () {\n            yield this.connection.query(`ALTER TABLE ${yield this.connection.escape(this.name)} DROP INDEX ${yield this.connection.escape(columnName)};`);\n        }));\n        return this;\n    }\n    setColumnNullable(columnName, nullable) {\n        this.operations.push(() => __awaiter(this, void 0, void 0, function* () {\n            yield this.connection.query(`ALTER TABLE ${yield this.connection.escape(this.name)} MODIFY COLUMN ${yield this.connection.escape(columnName)} ${nullable ? \"NULL\" : \"NOT NULL\"};`);\n        }));\n        return this;\n    }\n    setColumnDefault(columnName, defaultValue) {\n        this.operations.push(() => __awaiter(this, void 0, void 0, function* () {\n            yield this.connection.query(`ALTER TABLE ${yield this.connection.escape(this.name)} MODIFY COLUMN ${yield this.connection.escape(columnName)} DEFAULT ${typeof defaultValue === \"string\" ? `'${defaultValue}'` : defaultValue};`);\n        }));\n        return this;\n    }\n    drop() {\n        this.operations.push(() => __awaiter(this, void 0, void 0, function* () {\n            yield this.connection.query(`DROP TABLE ${yield this.connection.escape(this.name)};`);\n        }));\n        return this;\n    }\n}\n","import { Table } from \"./Table\";\nexport class Database {\n    constructor(connection, operations) {\n        this.connection = connection;\n        this.operations = operations;\n    }\n    create(tableName, options) {\n        return new Table(tableName, this.connection, this.operations, false, options);\n    }\n    table(tableName) {\n        return new Table(tableName, this.connection, this.operations, true);\n    }\n}\n","var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport { Database } from \"./Database\";\nexport class MySql {\n    constructor(connections) {\n        this.operations = [];\n        this.connections = connections;\n    }\n    database(name, connectionName) {\n        let connection;\n        if (!connectionName) {\n            const connections = this.connections.getAllByDatabaseName(name);\n            if (connections.length === 0)\n                throw new Error(`No connections found for database \"${name}\"`);\n            if (connections.length > 1)\n                throw new Error(`Multiple connections found for database \"${name}\". Connection name must be specified.`);\n            connection = connections[0];\n        }\n        else {\n            connection = this.connections.get(connectionName);\n        }\n        this.operations.push(() => __awaiter(this, void 0, void 0, function* () {\n            yield connection.query(`CREATE DATABASE IF NOT EXISTS ${yield connection.escape(name)};`);\n        }));\n        this.operations.push(() => __awaiter(this, void 0, void 0, function* () {\n            yield connection.query(`USE ${yield connection.escape(name)};`);\n        }));\n        return new Database(connection, this.operations);\n    }\n    executePendingOperations() {\n        return __awaiter(this, void 0, void 0, function* () {\n            while (this.operations.length > 0) {\n                const operation = this.operations.shift();\n                yield operation();\n            }\n        });\n    }\n}\n"],"names":["IntColumnTypeEnum","__webpack_require__","exports","definition","key","o","Object","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","call","AbstractMigration","y","__WEBPACK_EXTERNAL_MODULE__electra_utility_78eadf20__","Validators","x","d","__WEBPACK_EXTERNAL_MODULE_chalk__","Log","red","message","console","log","blue","green","yellow","AbstractColumn","constructor","name","this","validateName","getIndexDefinition","getName","valid","all","string","minLength","regex","validate","TypeError","validateOptions","options","schema","addNullableStatement","query","nullable","addDefaultStatement","defaultValue","undefined","addIndexStatement","index","columnName","addUnsignedStatement","unsigned","addZeroFillStatement","zeroFill","addAutoIncrementStatement","autoIncrement","addPrimaryKeyStatement","primaryKey","addAfterStatement","addAfter","tableExists","ColumnDefinition","type","default","after","create","value","zerofill","IndexDefinitionType","StringColumnTypeEnum","BlobColumnTypeEnum","TableEncodingEnum","TableCollationEnum","IndexDefinition","indexColumns","indexType","INDEX","defaultName","defaultIndexName","indexName","columns","push","length","Error","indexDefinition","UNIQUE","map","column","join","IntColumn","super","assign","INT","enumValue","boolean","integer","optional","getColumnDefinition","IdColumn","DecimalColumn","precision","scale","number","toFixed","StringColumn","VARCHAR","columnType","CHAR","DateColumn","TimeColumn","DateTimeColumn","BlobColumn","BLOB","EnumColumn","values","array","valuesEnum","DoubleColumn","__awaiter","thisArg","_arguments","P","generator","Promise","resolve","reject","fulfilled","step","next","e","rejected","result","done","then","apply","Table","connection","operations","columnAdditions","tableOptions","encoding","UTF8MB4","collation","UTF8MB4_GENERAL_CI","escapedTableName","escape","allDefinitions","toLowerCase","filter","tableOptionsString","splice","id","int","decimal","double","enum","date","time","datetime","blob","renameColumn","currentName","newName","dropColumn","addColumnIndex","dropColumnIndex","setColumnNullable","setColumnDefault","drop","Database","tableName","table","MySql","connections","database","connectionName","getAllByDatabaseName","executePendingOperations","operation","shift"],"sourceRoot":""}