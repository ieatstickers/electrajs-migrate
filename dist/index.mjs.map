{"version":3,"file":"index.mjs","mappings":"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","sources":["webpack://@electra/migrate/webpack/bootstrap","webpack://@electra/migrate/./src/Migration/Column/Int/IntColumnTypeEnum.ts","webpack://@electra/migrate/webpack/runtime/define property getters","webpack://@electra/migrate/webpack/runtime/hasOwnProperty shorthand","webpack://@electra/migrate/./src/Migration/AbstractMigration.ts","webpack://@electra/migrate/external module \"@electra/utility\"","webpack://@electra/migrate/external module \"chalk\"","webpack://@electra/migrate/./src/Utility/Log/Log.ts","webpack://@electra/migrate/./src/Migration/Column/AbstractColumn.ts","webpack://@electra/migrate/./src/Migration/Definition/Enum/IndexDefinitionTypeEnum.ts","webpack://@electra/migrate/./src/Migration/Column/String/StringColumnTypeEnum.ts","webpack://@electra/migrate/./src/Migration/Column/Blob/BlobColumnTypeEnum.ts","webpack://@electra/migrate/./src/Migration/Database/Enum/TableEncodingEnum.ts","webpack://@electra/migrate/./src/Migration/Database/Enum/TableCollationEnum.ts","webpack://@electra/migrate/./src/Migration/Definition/IndexDefinition.ts","webpack://@electra/migrate/./src/Migration/Definition/ColumnDefinition.ts","webpack://@electra/migrate/./src/Migration/Column/Int/IntColumn.ts","webpack://@electra/migrate/./src/Migration/Column/Id/IdColumn.ts","webpack://@electra/migrate/./src/Migration/Column/Decimal/DecimalColumn.ts","webpack://@electra/migrate/./src/Migration/Column/String/StringColumn.ts","webpack://@electra/migrate/./src/Migration/Column/Date/DateColumn.ts","webpack://@electra/migrate/./src/Migration/Column/Time/TimeColumn.ts","webpack://@electra/migrate/./src/Migration/Column/DateTime/DateTimeColumn.ts","webpack://@electra/migrate/./src/Migration/Column/Blob/BlobColumn.ts","webpack://@electra/migrate/./src/Migration/Column/Enum/EnumColumn.ts","webpack://@electra/migrate/./src/Migration/Column/Double/DoubleColumn.ts","webpack://@electra/migrate/./src/Migration/Modification/RenameColumn/RenameColumnModification.ts","webpack://@electra/migrate/./src/Migration/Modification/DropColumn/DropColumnModification.ts","webpack://@electra/migrate/./src/Migration/Modification/AddIndex/AddIndexModification.ts","webpack://@electra/migrate/./src/Migration/Modification/DropIndex/DropIndexModification.ts","webpack://@electra/migrate/./src/Migration/Modification/SetNullable/SetNullableModification.ts","webpack://@electra/migrate/./src/Migration/Modification/SetDefault/SetDefaultModification.ts","webpack://@electra/migrate/./src/Migration/Modification/DropTable/DropTableModification.ts","webpack://@electra/migrate/./src/Migration/Database/Table.ts","webpack://@electra/migrate/./src/Migration/Database/Database.ts","webpack://@electra/migrate/./src/Migration/Database/MySql.ts"],"sourcesContent":["// The require scope\nvar __webpack_require__ = {};\n\n","export var IntColumnTypeEnum;\n(function (IntColumnTypeEnum) {\n    IntColumnTypeEnum[\"INT\"] = \"INT\";\n    IntColumnTypeEnum[\"TINYINT\"] = \"TINYINT\";\n    IntColumnTypeEnum[\"SMALLINT\"] = \"SMALLINT\";\n    IntColumnTypeEnum[\"MEDIUMINT\"] = \"MEDIUMINT\";\n    IntColumnTypeEnum[\"BIGINT\"] = \"BIGINT\";\n})(IntColumnTypeEnum || (IntColumnTypeEnum = {}));\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","export class AbstractMigration {\n}\n","var x = y => { var x = {}; __webpack_require__.d(x, y); return x; }\nvar y = x => () => x\nconst __WEBPACK_NAMESPACE_OBJECT__ = x({ [\"Validators\"]: () => __WEBPACK_EXTERNAL_MODULE__electra_utility_78eadf20__.Validators });","var x = y => { var x = {}; __webpack_require__.d(x, y); return x; }\nvar y = x => () => x\nconst __WEBPACK_NAMESPACE_OBJECT__ = x({ [\"default\"]: () => __WEBPACK_EXTERNAL_MODULE_chalk__[\"default\"] });","import chalk from \"chalk\";\nexport class Log {\n    static red(message) {\n        console.log(chalk.redBright(message));\n    }\n    static blue(message) {\n        console.log(chalk.blueBright(message));\n    }\n    static green(message) {\n        console.log(chalk.greenBright(message));\n    }\n    static yellow(message) {\n        console.log(chalk.yellowBright(message));\n    }\n}\n","import { Validators } from \"@electra/utility\";\nimport { Log } from \"../../Utility/Log/Log\";\nexport class AbstractColumn {\n    constructor(name) {\n        this.name = name;\n        this.validateName(this.name);\n    }\n    getIndexDefinition() {\n        return null;\n    }\n    getName() {\n        return this.name;\n    }\n    validateName(name) {\n        const { valid, message } = Validators\n            .all([\n            Validators.string(),\n            Validators.minLength(1),\n            Validators.regex(/^[a-zA-Z_][a-zA-Z0-9_]{0,63}$/, 'A-z, 0-9 and/or _')\n        ])\n            .validate(name);\n        if (!valid)\n            throw new TypeError(`Invalid ${this.constructor.name} name: ${message}`);\n        return true;\n    }\n    validateOptions(options, schema) {\n        const { valid, message } = Validators.schema(schema).validate(options);\n        if (!valid) {\n            throw new TypeError(`Invalid ${this.constructor.name} options. ${message}`);\n        }\n        return true;\n    }\n    addNullableStatement(query, nullable) {\n        return nullable ? `${query} NULL` : `${query} NOT NULL`;\n    }\n    addDefaultStatement(query, defaultValue) {\n        return defaultValue !== undefined ? `${query} DEFAULT ${defaultValue}` : query;\n    }\n    addIndexStatement(query, index, columnName) {\n        return index ? `${query}, ADD INDEX (${columnName})` : query;\n    }\n    addUnsignedStatement(query, unsigned) {\n        return unsigned ? `${query} UNSIGNED` : query;\n    }\n    addZeroFillStatement(query, zeroFill) {\n        return zeroFill ? `${query} ZEROFILL` : query;\n    }\n    addAutoIncrementStatement(query, autoIncrement) {\n        return autoIncrement ? `${query} AUTO_INCREMENT` : query;\n    }\n    addPrimaryKeyStatement(query, primaryKey) {\n        return primaryKey ? `${query} PRIMARY KEY` : query;\n    }\n    addAfterStatement(query, addAfter, tableExists) {\n        // Log warning if createTable is true and addAfter is set\n        if (!tableExists && addAfter) {\n            Log.yellow(\"WARNING: addAfter option is ignored when creating a new table.\");\n        }\n        if (!tableExists)\n            return query;\n        if (addAfter) {\n            query += ` AFTER ${addAfter}`;\n        }\n        return query;\n    }\n}\n","export var IndexDefinitionTypeEnum;\n(function (IndexDefinitionTypeEnum) {\n    IndexDefinitionTypeEnum[\"INDEX\"] = \"INDEX\";\n    IndexDefinitionTypeEnum[\"UNIQUE\"] = \"UNIQUE\";\n    IndexDefinitionTypeEnum[\"FULLTEXT\"] = \"FULLTEXT\";\n})(IndexDefinitionTypeEnum || (IndexDefinitionTypeEnum = {}));\n","export var StringColumnTypeEnum;\n(function (StringColumnTypeEnum) {\n    StringColumnTypeEnum[\"CHAR\"] = \"CHAR\";\n    StringColumnTypeEnum[\"VARCHAR\"] = \"VARCHAR\";\n    StringColumnTypeEnum[\"TEXT\"] = \"TEXT\";\n    StringColumnTypeEnum[\"TINYTEXT\"] = \"TINYTEXT\";\n    StringColumnTypeEnum[\"MEDIUMTEXT\"] = \"MEDIUMTEXT\";\n    StringColumnTypeEnum[\"LONGTEXT\"] = \"LONGTEXT\";\n})(StringColumnTypeEnum || (StringColumnTypeEnum = {}));\n","export var BlobColumnTypeEnum;\n(function (BlobColumnTypeEnum) {\n    BlobColumnTypeEnum[\"BLOB\"] = \"BLOB\";\n    BlobColumnTypeEnum[\"TINYBLOB\"] = \"TINYBLOB\";\n    BlobColumnTypeEnum[\"MEDIUMBLOB\"] = \"MEDIUMBLOB\";\n    BlobColumnTypeEnum[\"LONGBLOB\"] = \"LONGBLOB\";\n})(BlobColumnTypeEnum || (BlobColumnTypeEnum = {}));\n","export var TableEncodingEnum;\n(function (TableEncodingEnum) {\n    TableEncodingEnum[\"UTF8\"] = \"utf8\";\n    TableEncodingEnum[\"UTF8MB4\"] = \"utf8mb4\";\n})(TableEncodingEnum || (TableEncodingEnum = {}));\n","export var TableCollationEnum;\n(function (TableCollationEnum) {\n    TableCollationEnum[\"UTF8_GENERAL_CI\"] = \"utf8_general_ci\";\n    TableCollationEnum[\"UTF8MB4_GENERAL_CI\"] = \"utf8mb4_general_ci\";\n    TableCollationEnum[\"UTF8MB4_UNICODE_CI\"] = \"utf8mb4_unicode_ci\";\n})(TableCollationEnum || (TableCollationEnum = {}));\n","import { IndexDefinitionTypeEnum } from \"./Enum/IndexDefinitionTypeEnum\";\nexport class IndexDefinition {\n    constructor() {\n        this.indexColumns = [];\n        this.indexType = IndexDefinitionTypeEnum.INDEX;\n    }\n    static create() {\n        return new IndexDefinition();\n    }\n    defaultName(name) {\n        this.defaultIndexName = name;\n        return this;\n    }\n    name(name) {\n        this.indexName = name;\n        return this;\n    }\n    columns(...columns) {\n        this.indexColumns.push(...columns);\n        return this;\n    }\n    type(type) {\n        this.indexType = type;\n        return this;\n    }\n    get() {\n        if (!this.indexColumns.length)\n            throw new Error(\"No columns defined for index\");\n        const indexName = this.indexName || this.defaultIndexName;\n        let indexDefinition = indexName && this.indexType === IndexDefinitionTypeEnum.UNIQUE ? `${this.indexType} INDEX` : this.indexType;\n        if (indexName)\n            indexDefinition += ` \\`${indexName}\\``;\n        indexDefinition += ` (${this.indexColumns.map(column => `\\`${column}\\``).join(\", \")})`;\n        return indexDefinition;\n    }\n}\n","export class ColumnDefinition {\n    constructor(name, type) {\n        this.options = {\n            nullable: undefined,\n            default: undefined,\n            unsigned: undefined,\n            autoIncrement: undefined,\n            zeroFill: undefined,\n            primaryKey: undefined,\n            after: undefined\n        };\n        this.name = name;\n        this.type = type;\n    }\n    static create(name, type) {\n        return new ColumnDefinition(name, type);\n    }\n    nullable(nullable) {\n        this.options.nullable = nullable;\n        return this;\n    }\n    default(value) {\n        this.options.default = value;\n        return this;\n    }\n    unsigned(unsigned) {\n        this.options.unsigned = unsigned;\n        return this;\n    }\n    autoIncrement(autoIncrement) {\n        this.options.autoIncrement = autoIncrement;\n        return this;\n    }\n    zeroFill(zerofill) {\n        this.options.zeroFill = zerofill;\n        return this;\n    }\n    primaryKey(primaryKey) {\n        this.options.primaryKey = primaryKey;\n        return this;\n    }\n    after(after) {\n        this.options.after = after;\n        return this;\n    }\n    get() {\n        let definition = `\\`${this.name}\\` ${this.type}`;\n        if (this.options.unsigned === true)\n            definition += \" UNSIGNED\";\n        if (typeof this.options.nullable === \"boolean\")\n            definition += this.options.nullable ? \" NULL\" : \" NOT NULL\";\n        if (this.options.default !== undefined)\n            definition += ` DEFAULT ${this.options.default}`;\n        if (this.options.autoIncrement === true)\n            definition += \" AUTO_INCREMENT\";\n        if (this.options.zeroFill === true)\n            definition += \" ZEROFILL\";\n        if (this.options.primaryKey === true)\n            definition += \" PRIMARY KEY\";\n        if (typeof this.options.after === \"string\")\n            definition += ` AFTER \\`${this.options.after}\\``;\n        return definition;\n    }\n}\n","import { IntColumnTypeEnum } from \"./IntColumnTypeEnum\";\nimport { AbstractColumn } from \"../AbstractColumn\";\nimport { Validators } from \"@electra/utility\";\nimport { IndexDefinition } from \"../../Definition/IndexDefinition\";\nimport { ColumnDefinition } from \"../../Definition/ColumnDefinition\";\nexport class IntColumn extends AbstractColumn {\n    constructor(name, options) {\n        super(name);\n        this.options = Object.assign({ type: IntColumnTypeEnum.INT, nullable: false, default: undefined, unsigned: false, autoIncrement: false, zeroFill: false, primaryKey: false, index: false, addAfter: undefined }, options);\n        this.validateOptions(this.options, {\n            type: Validators.enumValue(IntColumnTypeEnum),\n            nullable: Validators.boolean(),\n            default: Validators.integer({ optional: true }),\n            unsigned: Validators.boolean(),\n            autoIncrement: Validators.boolean(),\n            zeroFill: Validators.boolean(),\n            primaryKey: Validators.boolean(),\n            index: Validators.boolean(),\n            addAfter: Validators.string({ optional: true })\n        });\n    }\n    getColumnDefinition() {\n        return ColumnDefinition\n            .create(this.name, this.options.type)\n            .nullable(this.options.nullable)\n            .default(this.options.default)\n            .unsigned(this.options.unsigned)\n            .autoIncrement(this.options.autoIncrement)\n            .zeroFill(this.options.zeroFill)\n            .primaryKey(this.options.primaryKey)\n            .after(this.options.addAfter);\n    }\n    getIndexDefinition() {\n        if (!this.options.index)\n            return null;\n        return IndexDefinition\n            .create()\n            .columns(this.name);\n    }\n}\n","import { IntColumnTypeEnum } from \"../Int/IntColumnTypeEnum\";\nimport { IntColumn } from \"../Int/IntColumn\";\nexport class IdColumn extends IntColumn {\n    constructor(name) {\n        super(name, {\n            type: IntColumnTypeEnum.INT,\n            nullable: false,\n            default: undefined,\n            unsigned: true,\n            autoIncrement: true,\n            zeroFill: false,\n            primaryKey: true,\n            index: false\n        });\n    }\n}\n","import { AbstractColumn } from \"../AbstractColumn\";\nimport { Validators } from \"@electra/utility\";\nimport { ColumnDefinition } from \"../../Definition/ColumnDefinition\";\nimport { IndexDefinition } from \"../../Definition/IndexDefinition\";\nexport class DecimalColumn extends AbstractColumn {\n    constructor(name, options) {\n        super(name);\n        this.options = Object.assign({ nullable: false, default: undefined, unsigned: false, zeroFill: false, precision: 10, scale: 2, index: false, addAfter: undefined }, options);\n        this.validateOptions(this.options, {\n            nullable: Validators.boolean(),\n            default: Validators.number({ optional: true }),\n            unsigned: Validators.boolean(),\n            zeroFill: Validators.boolean(),\n            precision: Validators.integer(),\n            scale: Validators.integer(),\n            index: Validators.boolean(),\n            addAfter: Validators.string({ optional: true })\n        });\n    }\n    getColumnDefinition() {\n        return ColumnDefinition\n            .create(this.name, `DECIMAL(${this.options.precision}, ${this.options.scale})`)\n            .nullable(this.options.nullable)\n            .default(typeof this.options.default === \"number\"\n            ? this.options.default.toFixed(this.options.scale)\n            : undefined)\n            .unsigned(this.options.unsigned)\n            .zeroFill(this.options.zeroFill)\n            .after(this.options.addAfter);\n    }\n    getIndexDefinition() {\n        if (!this.options.index)\n            return null;\n        return IndexDefinition\n            .create()\n            .columns(this.name);\n    }\n}\n","import { StringColumnTypeEnum } from \"./StringColumnTypeEnum\";\nimport { AbstractColumn } from \"../AbstractColumn\";\nimport { Validators } from \"@electra/utility\";\nimport { ColumnDefinition } from \"../../Definition/ColumnDefinition\";\nimport { IndexDefinition } from \"../../Definition/IndexDefinition\";\nexport class StringColumn extends AbstractColumn {\n    constructor(name, options) {\n        super(name);\n        const type = (options === null || options === void 0 ? void 0 : options.type) || StringColumnTypeEnum.VARCHAR;\n        this.options = Object.assign({ type: type, nullable: false, primaryKey: false, default: undefined, length: type !== StringColumnTypeEnum.VARCHAR ? undefined : 255, index: false, addAfter: undefined }, options);\n        this.validateOptions(this.options, {\n            type: Validators.enumValue(StringColumnTypeEnum),\n            nullable: Validators.boolean(),\n            primaryKey: Validators.boolean(),\n            default: Validators.string({ optional: true }),\n            length: Validators.integer({ optional: true }),\n            index: Validators.boolean(),\n            addAfter: Validators.string({ optional: true })\n        });\n    }\n    getColumnDefinition() {\n        let columnType = this.options.type;\n        if (this.options.type === StringColumnTypeEnum.CHAR || this.options.type === StringColumnTypeEnum.VARCHAR) {\n            if (this.options.length !== undefined)\n                columnType += `(${this.options.length})`;\n        }\n        return ColumnDefinition\n            .create(this.name, columnType)\n            .nullable(this.options.nullable)\n            .primaryKey(this.options.primaryKey)\n            .default(this.options.default ? `'${this.options.default}'` : undefined)\n            .after(this.options.addAfter);\n    }\n    getIndexDefinition() {\n        if (!this.options.index)\n            return null;\n        return IndexDefinition\n            .create()\n            .columns(this.name);\n    }\n}\n","import { Validators } from \"@electra/utility\";\nimport { AbstractColumn } from \"../AbstractColumn\";\nimport { IndexDefinition } from \"../../Definition/IndexDefinition\";\nimport { ColumnDefinition } from \"../../Definition/ColumnDefinition\";\nexport class DateColumn extends AbstractColumn {\n    constructor(name, options) {\n        super(name);\n        this.options = Object.assign({ nullable: false, default: undefined, index: false, addAfter: undefined }, options);\n        this.validateOptions(this.options, {\n            nullable: Validators.boolean(),\n            default: Validators.regex(/^\\d{4}-(0[1-9]|1[0-2])-(0[1-9]|[12]\\d|3[01])$/, 'YYYY-MM-DD', { optional: true }),\n            index: Validators.boolean(),\n            addAfter: Validators.string({ optional: true })\n        });\n    }\n    getColumnDefinition() {\n        return ColumnDefinition\n            .create(this.name, \"DATE\")\n            .nullable(this.options.nullable)\n            .default(this.options.default ? `'${this.options.default}'` : undefined)\n            .after(this.options.addAfter);\n    }\n    getIndexDefinition() {\n        if (!this.options.index)\n            return null;\n        return IndexDefinition\n            .create()\n            .columns(this.name);\n    }\n}\n","import { AbstractColumn } from \"../AbstractColumn\";\nimport { Validators } from \"@electra/utility\";\nimport { ColumnDefinition } from \"../../Definition/ColumnDefinition\";\nexport class TimeColumn extends AbstractColumn {\n    constructor(name, options) {\n        super(name);\n        this.options = Object.assign({ nullable: false, default: undefined, addAfter: undefined }, options);\n        this.validateOptions(this.options, {\n            nullable: Validators.boolean(),\n            default: Validators.regex(/^([01]\\d|2[0-3]):([0-5]\\d):([0-5]\\d)$/, 'HH:MM:SS', { optional: true }),\n            addAfter: Validators.string({ optional: true })\n        });\n    }\n    getColumnDefinition() {\n        return ColumnDefinition\n            .create(this.name, \"TIME\")\n            .nullable(this.options.nullable)\n            .default(this.options.default ? `'${this.options.default}'` : undefined)\n            .after(this.options.addAfter);\n    }\n}\n","import { AbstractColumn } from \"../AbstractColumn\";\nimport { Validators } from \"@electra/utility\";\nimport { ColumnDefinition } from \"../../Definition/ColumnDefinition\";\nimport { IndexDefinition } from \"../../Definition/IndexDefinition\";\nexport class DateTimeColumn extends AbstractColumn {\n    constructor(name, options) {\n        super(name);\n        this.options = Object.assign({ nullable: false, default: undefined, index: false, addAfter: undefined }, options);\n        this.validateOptions(this.options, {\n            nullable: Validators.boolean(),\n            default: Validators.regex(/^\\d{4}-(0[1-9]|1[0-2])-(0[1-9]|[12]\\d|3[01]) ([01]\\d|2[0-3]):([0-5]\\d):([0-5]\\d)$/, 'YYYY-MM-DD HH:MM:SS', { optional: true }),\n            index: Validators.boolean(),\n            addAfter: Validators.string({ optional: true })\n        });\n    }\n    getColumnDefinition() {\n        return ColumnDefinition\n            .create(this.name, \"DATETIME\")\n            .nullable(this.options.nullable)\n            .default(this.options.default ? `'${this.options.default}'` : undefined)\n            .after(this.options.addAfter);\n    }\n    getIndexDefinition() {\n        if (!this.options.index)\n            return null;\n        return IndexDefinition\n            .create()\n            .columns(this.name);\n    }\n}\n","import { BlobColumnTypeEnum } from \"./BlobColumnTypeEnum\";\nimport { Validators } from \"@electra/utility\";\nimport { AbstractColumn } from \"../AbstractColumn\";\nimport { ColumnDefinition } from \"../../Definition/ColumnDefinition\";\nexport class BlobColumn extends AbstractColumn {\n    constructor(name, options) {\n        super(name);\n        this.options = Object.assign({ type: BlobColumnTypeEnum.BLOB, nullable: false, addAfter: undefined }, options);\n        this.validateOptions(this.options, {\n            type: Validators.enumValue(BlobColumnTypeEnum),\n            nullable: Validators.boolean(),\n            addAfter: Validators.string({ optional: true })\n        });\n    }\n    getColumnDefinition() {\n        return ColumnDefinition\n            .create(this.name, this.options.type)\n            .nullable(this.options.nullable)\n            .after(this.options.addAfter);\n    }\n}\n","import { AbstractColumn } from \"../AbstractColumn\";\nimport { Validators } from \"@electra/utility\";\nimport { ColumnDefinition } from \"../../Definition/ColumnDefinition\";\nimport { IndexDefinition } from \"../../Definition/IndexDefinition\";\nexport class EnumColumn extends AbstractColumn {\n    constructor(name, values, options) {\n        super(name);\n        this.values = values;\n        const { valid, message } = Validators\n            .all([\n            Validators.array(Validators.all([Validators.string(), Validators.minLength(1)])),\n            Validators.minLength(1)\n        ])\n            .validate(this.values);\n        if (!valid)\n            throw new TypeError(`Invalid ${this.constructor.name} values. ${message}`);\n        this.options = Object.assign({ nullable: false, default: undefined, index: false, addAfter: undefined }, options);\n        const valuesEnum = {};\n        for (const value of this.values)\n            valuesEnum[value] = value;\n        this.validateOptions(this.options, {\n            nullable: Validators.boolean(),\n            default: Validators.enumValue(valuesEnum, { optional: true }),\n            index: Validators.boolean(),\n            addAfter: Validators.string({ optional: true })\n        });\n    }\n    getColumnDefinition() {\n        return ColumnDefinition\n            .create(this.name, `ENUM('${this.values.join(\"', '\")}')`)\n            .nullable(this.options.nullable)\n            .default(this.options.default ? `'${this.options.default}'` : undefined)\n            .after(this.options.addAfter);\n    }\n    getIndexDefinition() {\n        if (!this.options.index)\n            return null;\n        return IndexDefinition\n            .create()\n            .columns(this.name);\n    }\n}\n","import { AbstractColumn } from \"../AbstractColumn\";\nimport { Validators } from \"@electra/utility\";\nimport { ColumnDefinition } from \"../../Definition/ColumnDefinition\";\nimport { IndexDefinition } from \"../../Definition/IndexDefinition\";\nexport class DoubleColumn extends AbstractColumn {\n    constructor(name, options) {\n        super(name);\n        this.options = Object.assign({ nullable: false, default: undefined, zeroFill: false, precision: undefined, scale: undefined, index: false, addAfter: undefined }, options);\n        this.validateOptions(this.options, {\n            nullable: Validators.boolean(),\n            default: Validators.number({ optional: true }),\n            zeroFill: Validators.boolean(),\n            precision: Validators.integer({ optional: true }),\n            scale: Validators.integer({ optional: true }),\n            index: Validators.boolean(),\n            addAfter: Validators.string({ optional: true })\n        });\n        if ((this.options.precision != null || this.options.scale != null)\n            && (this.options.precision == null || this.options.scale == null)) {\n            throw new Error(`Precision and scale must be both defined or both undefined in column ${this.name}`);\n        }\n    }\n    getColumnDefinition() {\n        const type = this.options.precision != null && this.options.scale != null\n            ? `DOUBLE(${this.options.precision}, ${this.options.scale})`\n            : \"DOUBLE\";\n        return ColumnDefinition\n            .create(this.name, type)\n            .nullable(this.options.nullable)\n            .default(typeof this.options.default === \"number\"\n            ? this.options.default.toFixed(this.options.scale)\n            : undefined)\n            .zeroFill(this.options.zeroFill)\n            .after(this.options.addAfter);\n    }\n    getIndexDefinition() {\n        if (!this.options.index)\n            return null;\n        return IndexDefinition\n            .create()\n            .columns(this.name);\n    }\n}\n","export class RenameColumnModification {\n    constructor(currentName, newName) {\n        this.currentName = currentName;\n        this.newName = newName;\n    }\n    getModificationDefinition() {\n        return `RENAME COLUMN \\`${this.currentName}\\` TO \\`${this.newName}\\``;\n    }\n}\n","export class DropColumnModification {\n    constructor(name) {\n        this.name = name;\n    }\n    getModificationDefinition() {\n        return `DROP COLUMN \\`${this.name}\\``;\n    }\n}\n","export class AddIndexModification {\n    constructor(definition) {\n        this.definition = definition;\n    }\n    getModificationDefinition() {\n        return `ADD ${this.definition.get()}`;\n    }\n}\n","export class DropIndexModification {\n    constructor(name) {\n        this.name = name;\n    }\n    getModificationDefinition() {\n        return `DROP INDEX \\`${this.name}\\``;\n    }\n}\n","export class SetNullableModification {\n    constructor(name, nullable) {\n        this.name = name;\n        this.nullable = nullable;\n    }\n    getModificationDefinition() {\n        return `MODIFY COLUMN \\`${this.name}\\` ${this.nullable ? \"NULL\" : \"NOT NULL\"}`;\n    }\n}\n","export class SetDefaultModification {\n    constructor(name, defaultValue) {\n        this.name = name;\n        this.defaultValue = defaultValue;\n    }\n    getModificationDefinition() {\n        let defaultValue = this.defaultValue;\n        if (typeof defaultValue === \"string\")\n            defaultValue = `'${defaultValue}'`;\n        else if (defaultValue == null)\n            defaultValue = \"NULL\";\n        return `MODIFY COLUMN \\`${this.name}\\` DEFAULT ${defaultValue}`;\n    }\n}\n","export class DropTableModification {\n    constructor(name) {\n        this.name = name;\n    }\n    getModificationDefinition() {\n        return `DROP TABLE IF EXISTS \\`${this.name}\\``;\n    }\n}\n","var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport { IntColumn } from \"../Column/Int/IntColumn\";\nimport { IdColumn } from \"../Column/Id/IdColumn\";\nimport { DecimalColumn } from \"../Column/Decimal/DecimalColumn\";\nimport { StringColumn } from \"../Column/String/StringColumn\";\nimport { DateColumn } from \"../Column/Date/DateColumn\";\nimport { TimeColumn } from \"../Column/Time/TimeColumn\";\nimport { DateTimeColumn } from \"../Column/DateTime/DateTimeColumn\";\nimport { BlobColumn } from \"../Column/Blob/BlobColumn\";\nimport { EnumColumn } from \"../Column/Enum/EnumColumn\";\nimport { DoubleColumn } from \"../Column/Double/DoubleColumn\";\nimport { TableEncodingEnum } from \"./Enum/TableEncodingEnum\";\nimport { TableCollationEnum } from \"./Enum/TableCollationEnum\";\nimport { RenameColumnModification } from \"../Modification/RenameColumn/RenameColumnModification\";\nimport { DropColumnModification } from \"../Modification/DropColumn/DropColumnModification\";\nimport { IndexDefinition } from \"../Definition/IndexDefinition\";\nimport { AddIndexModification } from \"../Modification/AddIndex/AddIndexModification\";\nimport { DropIndexModification } from \"../Modification/DropIndex/DropIndexModification\";\nimport { SetNullableModification } from \"../Modification/SetNullable/SetNullableModification\";\nimport { SetDefaultModification } from \"../Modification/SetDefault/SetDefaultModification\";\nimport { DropTableModification } from \"../Modification/DropTable/DropTableModification\";\nexport class Table {\n    constructor(name, connection, operations, tableExists, options) {\n        this.columnAdditions = [];\n        this.columnModifications = [];\n        this.tableModifications = [];\n        this.name = name;\n        this.connection = connection;\n        this.tableExists = tableExists;\n        const tableOptions = Object.assign({}, {\n            encoding: TableEncodingEnum.UTF8MB4,\n            collation: TableCollationEnum.UTF8MB4_GENERAL_CI\n        }, options);\n        operations.push(() => __awaiter(this, void 0, void 0, function* () {\n            if (this.columnAdditions.length === 0\n                && this.columnModifications.length === 0\n                && this.tableModifications.length === 0)\n                return;\n            // Create query\n            if (!this.tableExists && this.columnAdditions.length > 0) {\n                const createQuery = this.getCreateTableQuery(this.columnAdditions, tableOptions);\n                if (createQuery) {\n                    // Create the table\n                    yield this.connection.query(createQuery);\n                    // Set the table exists flag\n                    this.tableExists = true;\n                    // Clear the column additions\n                    this.columnAdditions.splice(0, this.columnAdditions.length);\n                }\n            }\n            // Alter query\n            if (this.columnAdditions.length > 0 || this.columnModifications.length > 0) {\n                const alterQuery = this.getAlterTableQuery(this.columnAdditions, this.columnModifications);\n                if (alterQuery) {\n                    yield this.connection.query(alterQuery);\n                }\n            }\n            if (this.tableModifications.length > 0) {\n                const alterQuery = this.tableModifications.map(mod => mod.getModificationDefinition()).join(\"; \");\n                yield this.connection.query(`${alterQuery};`);\n            }\n        }));\n    }\n    id(name = \"id\") {\n        this.columnAdditions.push(new IdColumn(name));\n        return this;\n    }\n    int(name, options) {\n        this.columnAdditions.push(new IntColumn(name, options));\n        return this;\n    }\n    decimal(name, options) {\n        this.columnAdditions.push(new DecimalColumn(name, options));\n        return this;\n    }\n    double(name, options) {\n        this.columnAdditions.push(new DoubleColumn(name, options));\n        return this;\n    }\n    string(name, options) {\n        this.columnAdditions.push(new StringColumn(name, options));\n        return this;\n    }\n    enum(name, values, options) {\n        this.columnAdditions.push(new EnumColumn(name, values, options));\n        return this;\n    }\n    date(name, options) {\n        this.columnAdditions.push(new DateColumn(name, options));\n        return this;\n    }\n    time(name, options) {\n        this.columnAdditions.push(new TimeColumn(name, options));\n        return this;\n    }\n    datetime(name, options) {\n        this.columnAdditions.push(new DateTimeColumn(name, options));\n        return this;\n    }\n    blob(name, options) {\n        this.columnAdditions.push(new BlobColumn(name, options));\n        return this;\n    }\n    renameColumn(currentName, newName) {\n        this.columnModifications.push(new RenameColumnModification(currentName, newName));\n        return this;\n    }\n    dropColumn(name) {\n        this.columnModifications.push(new DropColumnModification(name));\n        return this;\n    }\n    addIndex(columnNames, name, type) {\n        const indexDefinition = IndexDefinition\n            .create()\n            .defaultName(this.getDefaultIndexName(...columnNames))\n            .columns(...columnNames);\n        if (name)\n            indexDefinition.name(name);\n        if (type)\n            indexDefinition.type(type);\n        this.columnModifications.push(new AddIndexModification(indexDefinition));\n        return this;\n    }\n    dropIndex(...args) {\n        const [first] = args;\n        const name = Array.isArray(first) ? this.getDefaultIndexName(...first) : first;\n        this.columnModifications.push(new DropIndexModification(name));\n        return this;\n    }\n    setNullable(columnName, nullable) {\n        this.columnModifications.push(new SetNullableModification(columnName, nullable));\n        return this;\n    }\n    setDefault(columnName, defaultValue) {\n        this.columnModifications.push(new SetDefaultModification(columnName, defaultValue));\n        return this;\n    }\n    drop() {\n        this.tableModifications.push(new DropTableModification(this.name));\n        return this;\n    }\n    getDefaultIndexName(...columnNames) {\n        const columnNamesString = columnNames.sort().join(\"_\").toLowerCase();\n        return `${this.name.toLowerCase()}_${columnNamesString}_index`;\n    }\n    getCreateTableQuery(columnAdditions, tableOptions) {\n        // Column definitions\n        const columnDefinitions = columnAdditions.map(column => column.getColumnDefinition().get());\n        // Index definitions\n        const indexDefinitions = columnAdditions\n            .map(column => {\n            const definition = column.getIndexDefinition();\n            if (!definition)\n                return null;\n            return definition\n                .defaultName(this.getDefaultIndexName(column.getName()))\n                .get();\n        })\n            .filter(definition => definition != null);\n        // Combined definitions\n        const allDefinitions = [...columnDefinitions, ...indexDefinitions];\n        // Charset and collation\n        let tableOptionsString = \"\";\n        if (tableOptions.encoding)\n            tableOptionsString += ` DEFAULT CHARACTER SET ${tableOptions.encoding}`;\n        if (tableOptions.collation)\n            tableOptionsString += ` DEFAULT COLLATE ${tableOptions.collation}`;\n        return `CREATE TABLE \\`${this.name}\\` (${allDefinitions.join(\", \")})${tableOptionsString};`;\n    }\n    getAlterTableQuery(columnAdditions, columnModifications) {\n        const columnDefinitions = columnAdditions.map((column) => {\n            return `ADD COLUMN ${column.getColumnDefinition().get()}`;\n        });\n        const indexDefinitions = columnAdditions\n            .map((column) => {\n            const definition = column.getIndexDefinition();\n            if (!definition)\n                return null;\n            definition.defaultName(this.getDefaultIndexName(column.getName()));\n            return `ADD ${definition.get()}`;\n        })\n            .filter((definition) => definition != null);\n        const modificationDefinitions = columnModifications.map(mod => mod.getModificationDefinition());\n        const allDefinitions = [...columnDefinitions, ...indexDefinitions, ...modificationDefinitions];\n        if (allDefinitions.length === 0)\n            return null;\n        return `ALTER TABLE \\`${this.name}\\` ${allDefinitions.join(\", \")};`;\n    }\n}\n","import { Table } from \"./Table\";\nexport class Database {\n    constructor(connection, operations) {\n        this.connection = connection;\n        this.operations = operations;\n    }\n    create(tableName, options) {\n        return new Table(tableName, this.connection, this.operations, false, options);\n    }\n    table(tableName) {\n        return new Table(tableName, this.connection, this.operations, true);\n    }\n}\n","var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport { Database } from \"./Database\";\nexport class MySql {\n    constructor(connections) {\n        this.operations = [];\n        this.connections = connections;\n    }\n    database(name, connectionName) {\n        let connection;\n        if (!connectionName) {\n            const connections = this.connections.getAllByDatabaseName(name);\n            if (connections.length === 0)\n                throw new Error(`No connections found for database \"${name}\"`);\n            if (connections.length > 1)\n                throw new Error(`Multiple connections found for database \"${name}\". Connection name must be specified.`);\n            connection = connections[0];\n        }\n        else {\n            connection = this.connections.get(connectionName);\n        }\n        this.operations.push(() => __awaiter(this, void 0, void 0, function* () {\n            yield connection.query(`CREATE DATABASE IF NOT EXISTS ${yield connection.escape(name)};`);\n        }));\n        this.operations.push(() => __awaiter(this, void 0, void 0, function* () {\n            yield connection.query(`USE ${yield connection.escape(name)};`);\n        }));\n        return new Database(connection, this.operations);\n    }\n    executePendingOperations() {\n        return __awaiter(this, void 0, void 0, function* () {\n            while (this.operations.length > 0) {\n                const operation = this.operations.shift();\n                yield operation();\n            }\n        });\n    }\n}\n"],"names":["IntColumnTypeEnum","__webpack_require__","exports","definition","key","o","Object","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","call","AbstractMigration","y","__WEBPACK_EXTERNAL_MODULE__electra_utility_78eadf20__","Validators","x","d","__WEBPACK_EXTERNAL_MODULE_chalk__","Log","red","message","console","log","blue","green","yellow","AbstractColumn","constructor","name","this","validateName","getIndexDefinition","getName","valid","all","string","minLength","regex","validate","TypeError","validateOptions","options","schema","addNullableStatement","query","nullable","addDefaultStatement","defaultValue","undefined","addIndexStatement","index","columnName","addUnsignedStatement","unsigned","addZeroFillStatement","zeroFill","addAutoIncrementStatement","autoIncrement","addPrimaryKeyStatement","primaryKey","addAfterStatement","addAfter","tableExists","IndexDefinitionTypeEnum","StringColumnTypeEnum","BlobColumnTypeEnum","TableEncodingEnum","TableCollationEnum","IndexDefinition","indexColumns","indexType","INDEX","create","defaultName","defaultIndexName","indexName","columns","push","type","length","Error","indexDefinition","UNIQUE","map","column","join","ColumnDefinition","default","after","value","zerofill","IntColumn","super","assign","INT","enumValue","boolean","integer","optional","getColumnDefinition","IdColumn","DecimalColumn","precision","scale","number","toFixed","StringColumn","VARCHAR","columnType","CHAR","DateColumn","TimeColumn","DateTimeColumn","BlobColumn","BLOB","EnumColumn","values","array","valuesEnum","DoubleColumn","RenameColumnModification","currentName","newName","getModificationDefinition","DropColumnModification","AddIndexModification","DropIndexModification","SetNullableModification","SetDefaultModification","DropTableModification","Table","connection","operations","columnAdditions","columnModifications","tableModifications","tableOptions","encoding","UTF8MB4","collation","UTF8MB4_GENERAL_CI","__awaiter","thisArg","_arguments","generator","createQuery","getCreateTableQuery","splice","alterQuery","getAlterTableQuery","mod","P","Promise","resolve","reject","fulfilled","step","next","e","rejected","result","done","then","apply","id","int","decimal","double","enum","date","time","datetime","blob","renameColumn","dropColumn","addIndex","columnNames","getDefaultIndexName","dropIndex","args","first","Array","isArray","setNullable","setDefault","drop","columnNamesString","sort","toLowerCase","allDefinitions","filter","tableOptionsString","Database","tableName","table","MySql","connections","database","connectionName","getAllByDatabaseName","escape","executePendingOperations","operation","shift"],"sourceRoot":""}